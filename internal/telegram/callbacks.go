package telegram

import (
	"encoding/json"
	"fmt"
	"github.com/athebyme/forza-top-gear-bot/internal/repository"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) registerCallbackHandlers() {
	// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	b.CallbackHandlers = map[string]CallbackHandler{
		"races":               b.callbackRaces,
		"seasons":             b.callbackSeasons,
		"drivers":             b.callbackDrivers,
		"results":             b.callbackResults,
		"season_races":        b.callbackSeasonRaces,
		"race_results":        b.callbackRaceResults,
		"driver_card":         b.callbackDriverCard,
		"edit_driver_name":    b.callbackEditDriverName,
		"edit_driver_desc":    b.callbackEditDriverDescription,
		"edit_driver_photo":   b.callbackEditDriverPhoto,
		"new_race":            b.callbackNewRace,
		"new_season":          b.callbackNewSeason,
		"add_result":          b.callbackAddResult,
		"discipline":          b.callbackDiscipline,
		"disciplines_done":    b.callbackDisciplinesDone,
		"complete_race":       b.callbackCompleteRace,
		"edit_race":           b.callbackEditRace,
		"delete_race":         b.callbackDeleteRace,
		"confirm_delete_race": b.callbackConfirmDeleteRace,
		"place":               b.callbackPlace,
		"cancel_delete_race":  b.callbackCancelDeleteRace,
		"season_results":      b.callbackSeasonResults,
		"back_to_main":        b.callbackBackToMain,
		"cancel":              b.callbackCancel,
		"register_driver":     b.callbackRegisterDriver,
		"cars":                b.callbackCars,
		"car_class":           b.callbackCarClass,
		"car_class_all":       b.callbackCarClassAll,
		"random_car":          b.callbackRandomCar,
		"update_cars_db":      b.callbackUpdateCarsDB,
		"race_assign_cars":    b.callbackRaceAssignCars,
		"view_race_cars":      b.callbackViewRaceCars,
		"stats_season":        b.callbackStatsForSeason,
		"race_progress":       b.callbackRaceProgress,
		"admin_confirm_car":   b.callbackAdminConfirmCar,
		"leaderboard":         b.callbackLeaderboard,
		"select_discipline":   b.callbackSelectDiscipline,
		"set_place":           b.callbackSetPlace,

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
		"admin_confirm_all_cars": b.callbackAdminConfirmAllCars,
		"admin_add_result":       b.callbackAdminAddResult,
		"admin_select_place":     b.callbackAdminSelectPlace,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	b.CallbackHandlers["start_race"] = b.callbackStartRace
	b.CallbackHandlers["driver_command"] = b.callbackDriverCommand
	b.CallbackHandlers["admin_edit_result"] = b.callbackAdminEditResult
	b.CallbackHandlers["admin_edit_discipline"] = b.callbackAdminEditDiscipline
	b.CallbackHandlers["admin_set_place"] = b.callbackAdminSetPlace
	b.CallbackHandlers["admin_toggle_reroll"] = b.callbackAdminToggleReroll
	b.CallbackHandlers["admin_race_panel"] = b.callbackAdminRacePanel
	b.CallbackHandlers["admin_edit_results_menu"] = b.callbackAdminEditResultsMenu
	b.CallbackHandlers["admin_force_confirm_car"] = b.callbackAdminForceConfirmCar
	b.CallbackHandlers["admin_send_notifications"] = b.callbackAdminSendNotifications
	b.CallbackHandlers["race_detailed_status"] = b.callbackRaceDetailedStatus
	b.CallbackHandlers["activerace"] = b.callbackActiveRace
	b.CommandHandlers["startrace"] = b.handleStartRace

	b.CallbackHandlers["register_race"] = b.callbackRegisterRace
	b.CallbackHandlers["unregister_race"] = b.callbackUnregisterRace
	b.CallbackHandlers["start_race"] = b.callbackStartRace
	b.CallbackHandlers["confirm_car"] = b.callbackConfirmCar
	b.CallbackHandlers["reroll_car"] = b.callbackRerollCar
	b.CallbackHandlers["race_registrations"] = b.callbackRaceRegistrations
	b.CallbackHandlers["race_start_confirm"] = b.callbackRaceStartConfirm
	b.CallbackHandlers["complete_race_confirm"] = b.callbackCompleteRaceConfirm
	b.CallbackHandlers["race_details"] = b.callbackRaceDetails
}

// handleStartRace –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
func (b *Bot) handleStartRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–∞—Ä—Å–∏–º ID –≥–æ–Ω–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
		upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫")
			return
		}

		if len(upcomingRaces) == 0 {
			b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–Ω–æ–∫
		text := "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞, —É–∫–∞–∑–∞–≤ –µ–µ ID:\n\n"
		for _, race := range upcomingRaces {
			text += fmt.Sprintf("‚Ä¢ ID %d: %s (üìÖ %s)\n",
				race.ID, race.Name, b.formatDate(race.Date))
		}
		text += "\n–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: /startrace ID"

		b.sendMessage(chatID, text)
		return
	}

	raceID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–Ω–∫–∏. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ!")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–Ω–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞
	//if race.State != models.RaceStateNotStarted {
	//	b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ì–æ–Ω–∫–∞ '%s' —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", race.Name))
	//	return
	//}

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
		return
	}

	if len(registrations) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏")
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏")
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–Ω–∫—É
	err = b.RaceRepo.StartRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err))
		return
	}

	// –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	_, err = b.CarRepo.AssignCarsToRegisteredDrivers(tx, raceID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err))
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Ö –º–∞—à–∏–Ω–∞–º–∏.", race.Name))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	go b.notifyDriversAboutCarAssignments(raceID)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	b.showRaceDetails(chatID, raceID, userID)
}

// callbackStatsForSeason handles showing stats for a specific season
func (b *Bot) callbackStatsForSeason(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// Parse season ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	seasonID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞", true)
		return
	}

	// Delete the original message
	b.deleteMessage(chatID, query.Message.MessageID)

	// Show stats for selected season
	b.showDriverStats(chatID, seasonID)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallbackQuery(query *tgbotapi.CallbackQuery) {
	log.Printf("DEBUG: –ü–æ–ª—É—á–µ–Ω callback: %s", query.Data)
	b.answerCallbackQuery(query.ID, "", false)

	data := query.Data
	parts := strings.Split(data, ":")
	action := parts[0]

	if handler, exists := b.CallbackHandlers[action]; exists {
		handler(query)
	} else {
		log.Printf("%v", b.CallbackHandlers)
		b.sendMessage(query.Message.Chat.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
	}
}

// callbackRaces –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫
func (b *Bot) callbackRaces(query *tgbotapi.CallbackQuery) {
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleRaces(&message)

	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackSeasons –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∑–æ–Ω–æ–≤
func (b *Bot) callbackSeasons(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /seasons
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleSeasons(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackDrivers –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω—â–∏–∫–æ–≤
func (b *Bot) callbackDrivers(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–æ–Ω—â–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	drivers, statsMap, err := b.DriverRepo.GetAllWithStats()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	if len(drivers) == 0 {
		b.sendMessage(chatID, "üë®‚ÄçüèéÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–Ω—â–∏–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É —Å—á–µ—Ç—É (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ–Ω—â–∏–∫–æ–≤
	text := "üë®‚ÄçüèéÔ∏è *–ì–æ–Ω—â–∏–∫–∏ Top Gear Racing Club*\n\n"

	for _, driver := range drivers {
		stats := statsMap[driver.ID]
		text += fmt.Sprintf("*%s* - %d –æ—á–∫–æ–≤\n", driver.Name, stats.TotalScore)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω—â–∏–∫–∞
	keyboard := DriversKeyboard(drivers)

	b.sendMessageWithKeyboard(chatID, text, keyboard)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackResults –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (b *Bot) callbackResults(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π UI
	text := "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–æ–∫*\n\n"

	if len(seasons) == 0 {
		text += "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
	} else {
		text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
	}

	// –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
	if len(seasons) > 0 {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÜ –°–ï–ó–û–ù–´",
				"no_action",
			),
		))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∑–æ–Ω–∞
		for _, season := range seasons {
			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
			var buttonText string
			if season.Active {
				buttonText = fmt.Sprintf("üü¢ %s", season.Name)
			} else {
				buttonText = season.Name
			}

			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					buttonText,
					fmt.Sprintf("season_results:%d", season.ID),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
			"back_to_main",
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)
}

// callbackSeasonRaces –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞
func (b *Bot) callbackSeasonRaces(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	seasonID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é handleSeasonRaces
	b.handleSeasonRaces(chatID, seasonID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRaceResults –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceResults(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏.")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏
	b.showRaceResults(chatID, raceID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackDriverCard –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) callbackDriverCard(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω—â–∏–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	driverID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByID(driverID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–Ω—â–∏–∫–∞
	stats, err := b.DriverRepo.GetStats(driverID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	text := fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ–Ω—â–∏–∫–∞*\n\n*%s*\n", driver.Name)

	if driver.Description != "" {
		text += fmt.Sprintf("üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n\n", driver.Description)
	}

	text += fmt.Sprintf("üèÜ *–í—Å–µ–≥–æ –æ—á–∫–æ–≤:* %d\n", stats.TotalScore)
	text += fmt.Sprintf("üèÅ *–ì–æ–Ω–æ–∫:* %d\n\n", stats.TotalRaces)

	if len(stats.RecentRaces) > 0 {
		text += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–Ω–∫–∏:*\n"
		for _, race := range stats.RecentRaces {
			text += fmt.Sprintf("‚Ä¢ %s: %d –æ—á–∫–æ–≤\n", race.RaceName, race.Score)
		}
	} else {
		text += "*–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫*"
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	if driver.TelegramID == query.From.ID {
		keyboard := DriverProfileKeyboard()

		if driver.PhotoURL != "" {
			b.sendPhotoWithKeyboard(chatID, driver.PhotoURL, text, keyboard)
		} else {
			b.sendMessageWithKeyboard(chatID, text, keyboard)
		}
	} else {
		if driver.PhotoURL != "" {
			b.sendPhoto(chatID, driver.PhotoURL, text)
		} else {
			b.sendMessage(chatID, text)
		}
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackEditDriverName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) callbackEditDriverName(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
	b.StateManager.SetState(userID, "edit_driver_name", make(map[string]interface{}))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
	msg := b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≥–æ–Ω—â–∏–∫–∞:")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
	b.StateManager.SetContextValue(userID, "message_id", msg.MessageID)
}

// callbackEditDriverDescription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) callbackEditDriverDescription(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
	b.StateManager.SetState(userID, "edit_driver_description", make(map[string]interface{}))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
	msg := b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ–Ω—â–∏–∫–∞:")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
	b.StateManager.SetContextValue(userID, "message_id", msg.MessageID)
}

// callbackEditDriverPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) callbackEditDriverPhoto(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "edit_driver_photo", make(map[string]interface{}))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
	msg := b.sendMessage(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞:")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
	b.StateManager.SetContextValue(userID, "message_id", msg.MessageID)
}

// callbackNewRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏
func (b *Bot) callbackNewRace(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /newrace
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleNewRace(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackNewSeason –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
func (b *Bot) callbackNewSeason(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞")
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
	b.StateManager.SetState(userID, "new_season_name", make(map[string]interface{}))

	b.sendMessage(chatID, "üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackAddResult –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (b *Bot) callbackAddResult(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –≥–æ–Ω—â–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏
	exists, err := b.ResultRepo.CheckDriverResultExists(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	if exists {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil || race == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É
	assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driver.ID)
	if err != nil || assignment == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏", true)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ –≥–æ–Ω–∫–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, discipline := range race.Disciplines {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				discipline,
				fmt.Sprintf("select_discipline:%d:%s", raceID, discipline),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.sendMessageWithKeyboard(
		chatID,
		fmt.Sprintf("üèÅ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", race.Name),
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)
}

// callbackDiscipline –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackDiscipline(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	disciplineIdx, err := strconv.Atoi(parts[1])
	if err != nil || disciplineIdx < 0 || disciplineIdx >= len(models.DefaultDisciplines) {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state, exists := b.StateManager.GetState(userID)
	if !exists || state.State != "new_race_disciplines" {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	disciplines, ok := state.ContextData["disciplines"].([]string)
	if !ok {
		disciplines = []string{}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
	discipline := models.DefaultDisciplines[disciplineIdx]
	found := false

	for i, d := range disciplines {
		if d == discipline {
			// –£–¥–∞–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞
			disciplines = append(disciplines[:i], disciplines[i+1:]...)
			found = true
			break
		}
	}

	if !found {
		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –≤ —Å–ø–∏—Å–æ–∫
		disciplines = append(disciplines, discipline)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	newContextData := map[string]interface{}{
		"season_id":   state.ContextData["season_id"],
		"name":        state.ContextData["name"],
		"date":        state.ContextData["date"],
		"car_class":   state.ContextData["car_class"],
		"disciplines": disciplines,
	}

	b.StateManager.SetState(userID, "new_race_disciplines", newContextData)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	keyboard := DisciplinesKeyboard(disciplines)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.editMessageWithKeyboard(chatID, messageID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", keyboard)
}

// callbackDisciplinesDone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
func (b *Bot) callbackDisciplinesDone(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state, exists := b.StateManager.GetState(userID)
	if !exists || state.State != "new_race_disciplines" {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	disciplines, ok := state.ContextData["disciplines"].([]string)
	if !ok || len(disciplines) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
		return
	}

	// Get tracked message IDs to delete
	messageIDs, ok := state.ContextData["messageIDs"].([]int)
	if !ok {
		messageIDs = []int{}
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥–æ–Ω–∫—É
	date, err := time.Parse("2006-01-02", state.ContextData["date"].(string))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ.")
		return
	}

	race := &models.Race{
		SeasonID:    state.ContextData["season_id"].(int),
		Name:        state.ContextData["name"].(string),
		Date:        date,
		CarClass:    state.ContextData["car_class"].(string),
		Disciplines: disciplines,
		Completed:   false,
		State:       models.RaceStateNotStarted,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–Ω–∫—É –≤ –ë–î
	_, err = b.RaceRepo.Create(race)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–Ω–∫–∏.")
		return
	}

	// Delete all tracked messages
	for _, msgID := range messageIDs {
		b.deleteMessage(chatID, msgID)
	}

	// Delete the keyboard message
	b.deleteMessage(chatID, query.Message.MessageID)

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –ù–æ–≤–∞—è –≥–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞
	b.callbackSeasonRaces(&tgbotapi.CallbackQuery{
		Data: fmt.Sprintf("season_races:%d", race.SeasonID),
		From: query.From,
		Message: &tgbotapi.Message{
			Chat: query.Message.Chat,
		},
	})
}

// callbackCompleteRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
func (b *Bot) callbackCompleteRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏
	count, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.")
		return
	}

	if count == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏
	err = b.RaceRepo.UpdateCompleted(raceID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏.")
		return
	}

	b.sendMessage(chatID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏
	b.showRaceResults(chatID, raceID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackEditRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏
func (b *Bot) callbackEditRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏
	b.StateManager.SetState(userID, "edit_race_name", map[string]interface{}{
		"race_id": raceID,
	})

	b.sendMessage(chatID, fmt.Sprintf("üèÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ (—Ç–µ–∫—É—â–µ–µ: %s):", race.Name))

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackDeleteRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–∏
func (b *Bot) callbackDeleteRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏
	count, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.")
		return
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
	text := fmt.Sprintf("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–æ–Ω–∫—É *%s*?", race.Name)
	if count > 0 {
		text += fmt.Sprintf("\n\n‚ö†Ô∏è –£ —ç—Ç–æ–π –≥–æ–Ω–∫–∏ –µ—Å—Ç—å %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!", count)
	}

	keyboard := ConfirmationKeyboard("delete_race", raceID)

	b.sendMessageWithKeyboard(chatID, text, keyboard)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackConfirmDeleteRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackConfirmDeleteRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–µ–∑–æ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞
	seasonID := race.SeasonID

	tx, err := b.db.Begin()
	if err != nil {
		return
	}

	// –£–¥–∞–ª—è–µ–º –≥–æ–Ω–∫—É
	err = b.RaceRepo.DeleteWithTx(tx, raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		tx.Rollback()
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏.")
		return
	}

	b.sendMessage(chatID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞
	b.callbackSeasonRaces(&tgbotapi.CallbackQuery{
		Data: fmt.Sprintf("season_races:%d", seasonID),
		From: query.From,
		Message: &tgbotapi.Message{
			Chat: query.Message.Chat,
		},
	})
}

// callbackCancelDeleteRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackCancelDeleteRace(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	b.sendMessage(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackSeasonResults –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞
func (b *Bot) callbackSeasonResults(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü–æ–ª—É—á–∞–µ–º ID —Å–µ–∑–æ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	seasonID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
	season, err := b.SeasonRepo.GetByID(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.")
		return
	}

	if season == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞
	races, err := b.RaceRepo.GetBySeason(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫.")
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
	var completedRaces []*models.Race
	for _, race := range races {
		if race.State == models.RaceStateCompleted {
			completedRaces = append(completedRaces, race)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–µ–∑–æ–Ω–∞
	text := fmt.Sprintf("üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–∑–æ–Ω–∞ '%s'*\n\n", season.Name)

	if len(completedRaces) == 0 {
		text += "–í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫."
	} else {
		text += fmt.Sprintf("*–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≥–æ–Ω–æ–∫:* %d –∏–∑ %d\n\n", len(completedRaces), len(races))
		text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω–∫–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫
	if len(completedRaces) > 0 {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ì–û–ù–ö–ò",
				"no_action",
			),
		))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≥–æ–Ω–∫–∏
		for _, race := range completedRaces {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚úÖ %s", race.Name),
					fmt.Sprintf("race_results:%d", race.ID),
				),
			))
		}
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
	var upcomingRaces []*models.Race
	for _, race := range races {
		if race.State != models.RaceStateCompleted {
			upcomingRaces = append(upcomingRaces, race)
		}
	}

	if len(upcomingRaces) > 0 {
		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
		if len(completedRaces) > 0 {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ",
					"no_action",
				),
			))
		}

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚è≥ –ù–ï–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ì–û–ù–ö–ò",
				"no_action",
			),
		))

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –≥–æ–Ω–æ–∫
		showLimit := 5
		showingAll := len(upcomingRaces) <= showLimit

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫
		for i, race := range upcomingRaces {
			if !showingAll && i >= showLimit {
				break
			}

			var buttonText string
			if race.State == models.RaceStateInProgress {
				buttonText = fmt.Sprintf("üèéÔ∏è %s", race.Name)
			} else {
				buttonText = fmt.Sprintf("‚è≥ %s", race.Name)
			}

			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					buttonText,
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}

		// –ï—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–µ –≤—Å–µ –≥–æ–Ω–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ–Ω–∫–∏"
		if !showingAll {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ–Ω–∫–∏ (%d)", len(upcomingRaces)),
					fmt.Sprintf("season_races:%d", seasonID),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–Ω—â–∏–∫–æ–≤
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤",
			fmt.Sprintf("stats_season:%d", seasonID),
		),
	))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∑–æ–Ω–∞
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–∞–º",
			"results",
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)
}

// callbackBackToMain –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) callbackBackToMain(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleStart(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è
func (b *Bot) callbackCancel(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if b.StateManager.HasState(userID) {
		b.StateManager.ClearState(userID)
		b.sendMessage(chatID, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Add callback handler for place selection
func (b *Bot) callbackPlace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
	b.answerCallbackQuery(query.ID, "", false)

	// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: place:DisciplineName:PlaceValue
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback (place).")
		return
	}

	// disciplineName := parts[1] // We actually get the discipline from state
	place, err := strconv.Atoi(parts[2])
	if err != nil || place < 0 || place > 3 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ (place).")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state, exists := b.StateManager.GetState(userID)
	if !exists || state.State != "add_result_discipline" {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
		// Optionally delete the message with the keyboard
		b.deleteMessage(chatID, messageID)
		return
	}

	// --- Logic copied and adapted from handleResultDiscipline ---
	disciplines := state.ContextData["disciplines"].([]string)
	currentIdx := state.ContextData["current_idx"].(int)
	results := state.ContextData["results"].(map[string]int)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	currentDiscipline := disciplines[currentIdx]
	results[currentDiscipline] = place

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
	currentIdx++

	if currentIdx < len(disciplines) {
		// –ï—â–µ –µ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
			"race_id":     state.ContextData["race_id"],
			"car_number":  state.ContextData["car_number"],
			"car_name":    state.ContextData["car_name"],
			"car_photo":   state.ContextData["car_photo"],
			"disciplines": disciplines,
			"current_idx": currentIdx,
			"results":     results,
		})

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã by editing the message
		nextDisciplineName := disciplines[currentIdx]
		keyboard := PlacesKeyboard(nextDisciplineName)
		b.editMessageWithKeyboard( // EDIT instead of send
			chatID,
			messageID, // Edit the existing message
			fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s':", nextDisciplineName),
			keyboard,
		)
	} else {
		// –í—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		driver, err := b.DriverRepo.GetByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
			b.editMessage(chatID, messageID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
			return
		}

		if driver == nil {
			b.editMessage(chatID, messageID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			b.StateManager.ClearState(userID)
			return
		}

		// Calculate total score
		totalScore := 0
		for _, place := range results {
			switch place {
			case 1:
				totalScore += 3
			case 2:
				totalScore += 2
			case 3:
				totalScore += 1
			}
		}

		// Check if driver used reroll for this race
		rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(state.ContextData["race_id"].(int), driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
			rerollUsed = false // Assume not used if error
		}

		// Apply reroll penalty if used
		rerollPenalty := 0
		if rerollUsed {
			rerollPenalty = 1
			totalScore -= rerollPenalty
		}

		// Create race result
		result := &models.RaceResult{
			RaceID:        state.ContextData["race_id"].(int),
			DriverID:      driver.ID,
			CarNumber:     state.ContextData["car_number"].(int),
			CarName:       state.ContextData["car_name"].(string),
			CarPhotoURL:   state.ContextData["car_photo"].(string),
			Results:       results,
			TotalScore:    totalScore,
			RerollPenalty: rerollPenalty,
		}

		// Save result to DB
		if rerollPenalty > 0 {
			_, err = b.ResultRepo.CreateWithRerollPenalty(result)
		} else {
			_, err = b.ResultRepo.Create(result)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			b.editMessage(chatID, messageID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
			return
		}

		// Clear state
		b.StateManager.ClearState(userID)

		// Format success message with penalties
		successMsg := fmt.Sprintf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
		if rerollPenalty > 0 {
			successMsg += fmt.Sprintf("\n\n‚ö†Ô∏è –£—á—Ç–µ–Ω —à—Ç—Ä–∞—Ñ -%d –±–∞–ª–ª –∑–∞ —Ä–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã.", rerollPenalty)
		}
		successMsg += fmt.Sprintf("\n\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ %d –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.", totalScore)

		// Edit the message to show success
		b.editMessage(chatID, messageID, successMsg)

		// Show race results in a new message
		b.showRaceResults(chatID, result.RaceID)
	}
}

// showRaceResults shows race results with reroll penalties
func (b *Bot) showRaceResults(chatID int64, raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get race results with driver names and reroll penalties
	results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.")
		return
	}

	// Format header
	text := fmt.Sprintf("üèÅ *%s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	// Add race state
	switch race.State {
	case models.RaceStateNotStarted:
		text += "‚è≥ *–°—Ç–∞—Ç—É—Å: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
	case models.RaceStateInProgress:
		text += "üèéÔ∏è *–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n"
	case models.RaceStateCompleted:
		text += "‚úÖ *–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
	}

	if len(results) == 0 {
		text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏."
	} else {
		// Format results table
		for i, result := range results {
			text += fmt.Sprintf("*%d. %s* (%s)\n", i+1, result.DriverName, result.CarName)
			text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", result.CarNumber)

			// Add discipline results
			var placesText []string
			for _, discipline := range race.Disciplines {
				place := result.Results[discipline]
				emoji := getPlaceEmoji(place)
				placesText = append(placesText, fmt.Sprintf("%s %s: %s", emoji, discipline, getPlaceText(place)))
			}

			text += fmt.Sprintf("üìä %s\n", strings.Join(placesText, " | "))

			// Add reroll penalty if any
			if result.RerollPenalty > 0 {
				text += fmt.Sprintf("‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", result.RerollPenalty)
			}

			text += fmt.Sprintf("üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: %d\n\n", result.TotalScore)
		}
	}

	// Create keyboard for race based on state
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add buttons based on race state
	switch race.State {
	case models.RaceStateNotStarted:
		// Add registration button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
				fmt.Sprintf("register_race:%d", raceID),
			),
		))
	case models.RaceStateInProgress:
		// Add registration status button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üë®‚ÄçüèéÔ∏è –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("race_registrations:%d", raceID),
			),
		))

		// Add add result button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				fmt.Sprintf("add_result:%d", raceID),
			),
		))

		// Add view cars button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))
	}

	// Add buttons common for all states
	if b.IsAdmin(0) { // Replace with actual user ID check when possible
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
				fmt.Sprintf("edit_race:%d", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			fmt.Sprintf("season_races:%d", race.SeasonID),
		),
	))

	// If we have photos from results, use the first one
	if len(results) > 0 && results[0].CarPhotoURL != "" {
		b.sendPhotoWithKeyboard(chatID, results[0].CarPhotoURL, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	} else {
		b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	}
}

// Add the proper callback handler for the registration button from main menu
func (b *Bot) callbackRegisterDriver(query *tgbotapi.CallbackQuery) {
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleRegister(&message)

	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

func (b *Bot) callbackRaceProgress(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Show race progress
	b.showRaceProgress(chatID, raceID)

	// Delete original message
	b.deleteMessage(chatID, messageID)
}

// showRaceProgress shows the current progress of a race including all submitted results
func (b *Bot) showRaceProgress(chatID int64, raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get all registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return
	}

	// Get all submitted results
	results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.")
		return
	}

	// Create a map of driver IDs to results for quick lookup
	driverResults := make(map[int]*repository.RaceResultWithDriver)
	for _, result := range results {
		driverResults[result.DriverID] = result
	}

	// Format header
	text := fmt.Sprintf("üèÅ *–•–æ–¥ –≥–æ–Ω–∫–∏: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	// Add race state
	switch race.State {
	case models.RaceStateNotStarted:
		text += "‚è≥ *–°—Ç–∞—Ç—É—Å: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
	case models.RaceStateInProgress:
		text += "üèéÔ∏è *–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n"
	case models.RaceStateCompleted:
		text += "‚úÖ *–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
	}

	// Add progress table
	text += "*–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n"

	if len(registrations) == 0 {
		text += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
	} else {
		// For each registered driver
		for i, reg := range registrations {
			// Get car assignment
			assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, reg.DriverID)
			if err != nil || assignment == nil {
				continue
			}

			// Check if driver has submitted results
			result, hasResult := driverResults[reg.DriverID]

			text += fmt.Sprintf("%d. *%s* (%s)\n", i+1, reg.DriverName, assignment.Car.Name)
			text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)

			// If reroll was used, show it
			if assignment.IsReroll {
				text += "üé≤ –ë—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ—Ä–æ–ª–ª\n"
			}

			// Show results if available
			if hasResult {
				// Add discipline results
				var placesText []string
				for _, discipline := range race.Disciplines {
					place := result.Results[discipline]
					emoji := getPlaceEmoji(place)
					placesText = append(placesText, fmt.Sprintf("%s %s: %s", emoji, discipline, getPlaceText(place)))
				}

				text += fmt.Sprintf("üìä %s\n", strings.Join(placesText, " | "))

				// Add reroll penalty if any
				if result.RerollPenalty > 0 {
					text += fmt.Sprintf("‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", result.RerollPenalty)
				}

				text += fmt.Sprintf("üèÜ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: %d –æ—á–∫–æ–≤\n", result.TotalScore)
			} else {
				text += "‚ùì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–Ω—ã\n"
			}

			text += "\n"
		}
	}

	// Create keyboard
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add relevant buttons based on race state
	if race.State == models.RaceStateInProgress {
		// Add add result button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				fmt.Sprintf("add_result:%d", raceID),
			),
		))

		// Add view cars button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// callbackAdminEditResult handles the admin editing a driver's result
func (b *Bot) callbackAdminEditResult(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	// Parse parameters from callback data (admin_edit_result:resultID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	resultID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	// Get the result details
	result, err := b.ResultRepo.GetByID(resultID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	if result == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true)
		return
	}

	// Get driver information
	driver, err := b.DriverRepo.GetByID(result.DriverID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(result.RaceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	// Format message with the current results
	text := fmt.Sprintf("‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n")
	text += fmt.Sprintf("–ì–æ–Ω–∫–∞: *%s*\n", race.Name)
	text += fmt.Sprintf("–ì–æ–Ω—â–∏–∫: *%s*\n", driver.Name)
	text += fmt.Sprintf("–ú–∞—à–∏–Ω–∞: *%s* (–Ω–æ–º–µ—Ä %d)\n\n", result.CarName, result.CarNumber)

	text += "*–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
	for _, discipline := range race.Disciplines {
		place := result.Results[discipline]
		emoji := getPlaceEmoji(place)
		text += fmt.Sprintf("‚Ä¢ %s %s: %s\n", emoji, discipline, getPlaceText(place))
	}

	if result.RerollPenalty > 0 {
		text += fmt.Sprintf("\n‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", result.RerollPenalty)
	}

	text += fmt.Sprintf("\nüèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: %d\n\n", result.TotalScore)
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

	// Create keyboard with disciplines
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, discipline := range race.Disciplines {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s %s", getPlaceEmoji(result.Results[discipline]), discipline),
				fmt.Sprintf("admin_edit_discipline:%d:%s", resultID, discipline),
			),
		))
	}

	// Add reroll penalty toggle button
	rerollToggleText := "üé≤ –î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª"
	if result.RerollPenalty > 0 {
		rerollToggleText = "üé≤ –£–±—Ä–∞—Ç—å —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª"
	}

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			rerollToggleText,
			fmt.Sprintf("admin_toggle_reroll:%d", resultID),
		),
	))

	// Add save/back buttons
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			fmt.Sprintf("race_results:%d", result.RaceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackAdminEditDiscipline handles editing a specific discipline result
func (b *Bot) callbackAdminEditDiscipline(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	// Parse parameters from callback data (admin_edit_discipline:resultID:disciplineName)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	resultID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	disciplineName := parts[2]

	// Get the result details
	result, err := b.ResultRepo.GetByID(resultID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	if result == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true)
		return
	}

	// Show place selection keyboard for this discipline
	text := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '%s':", disciplineName)

	// Create keyboard with place options
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Place options row
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"ü•á 1 –º–µ—Å—Ç–æ",
			fmt.Sprintf("admin_set_place:%d:%s:1", resultID, disciplineName),
		),
		tgbotapi.NewInlineKeyboardButtonData(
			"ü•à 2 –º–µ—Å—Ç–æ",
			fmt.Sprintf("admin_set_place:%d:%s:2", resultID, disciplineName),
		),
		tgbotapi.NewInlineKeyboardButtonData(
			"ü•â 3 –º–µ—Å—Ç–æ",
			fmt.Sprintf("admin_set_place:%d:%s:3", resultID, disciplineName),
		),
	))

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
			fmt.Sprintf("admin_set_place:%d:%s:0", resultID, disciplineName),
		),
	))

	// Back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			fmt.Sprintf("admin_edit_result:%d", resultID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackAdminSetPlace handles setting a new place for a discipline
func (b *Bot) callbackAdminSetPlace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	// Parse parameters (admin_set_place:resultID:disciplineName:place)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 4 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	resultID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	disciplineName := parts[2]

	place, err := strconv.Atoi(parts[3])
	if err != nil || place < 0 || place > 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞", true)
		return
	}

	// Get the result
	result, err := b.ResultRepo.GetByID(resultID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	if result == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true)
		return
	}

	// Update the place for this discipline
	result.Results[disciplineName] = place

	// Recalculate total score
	totalScore := 0
	for _, p := range result.Results {
		switch p {
		case 1:
			totalScore += 3
		case 2:
			totalScore += 2
		case 3:
			totalScore += 1
		}
	}

	// Apply reroll penalty if it exists
	if result.RerollPenalty > 0 {
		totalScore -= result.RerollPenalty
	}

	result.TotalScore = totalScore

	// Save the updated result
	err = b.ResultRepo.Update(result)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!", false)

	// Show the edit result screen again
	b.callbackAdminEditResult(&tgbotapi.CallbackQuery{
		Data:    fmt.Sprintf("admin_edit_result:%d", resultID),
		From:    query.From,
		Message: query.Message,
	})
}

// callbackAdminToggleReroll toggles the reroll penalty for a result
func (b *Bot) callbackAdminToggleReroll(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	// Parse parameters (admin_toggle_reroll:resultID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	resultID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	// Get the result
	result, err := b.ResultRepo.GetByID(resultID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	if result == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", true)
		return
	}

	// Toggle reroll penalty (1 <-> 0)
	if result.RerollPenalty > 0 {
		result.RerollPenalty = 0
		result.TotalScore += 1 // Remove penalty
	} else {
		result.RerollPenalty = 1
		result.TotalScore -= 1 // Apply penalty
	}

	// Save the updated result
	err = b.ResultRepo.Update(result)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", true)
		return
	}

	// Get the appropriate message
	message := "‚úÖ –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª –¥–æ–±–∞–≤–ª–µ–Ω!"
	if result.RerollPenalty == 0 {
		message = "‚úÖ –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª —É–±—Ä–∞–Ω!"
	}

	b.answerCallbackQuery(query.ID, message, false)

	// Show the edit result screen again
	b.callbackAdminEditResult(&tgbotapi.CallbackQuery{
		Data:    fmt.Sprintf("admin_edit_result:%d", resultID),
		From:    query.From,
		Message: query.Message,
	})
}

func (b *Bot) callbackRegisterRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã register_race: userID=%d, chatID=%d", userID, chatID)

	// –†–∞–∑–±–∏—Ä–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		log.Printf("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞: %s", query.Data)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		log.Printf("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≥–æ–Ω–∫–∏: %v", err)
		return
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω ID –≥–æ–Ω–∫–∏: %d", raceID)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –≥–æ–Ω—â–∏–∫
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É.")
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ–Ω—â–∏–∫–∞ –Ω–∞ –≥–æ–Ω–∫—É
	err = b.RaceRepo.RegisterDriver(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≥–æ–Ω–∫—É!", false)
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≥–æ–Ω–∫—É '%s'!", race.Name))

	b.deleteMessage(chatID, messageID)

	b.showRaceDetails(chatID, raceID, userID)
}

// callbackAdminRacePanel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≥–æ–Ω–∫–∏
func (b *Bot) callbackAdminRacePanel(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
	b.showAdminRacePanel(chatID, raceID)

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)
}

// callbackAdminForceConfirmCar –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—à–∏–Ω—É –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) callbackAdminForceConfirmCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ (admin_force_confirm_car:raceID:driverID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driverID, err := strconv.Atoi(parts[2])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –º–∞—à–∏–Ω—É
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driverID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", false)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	b.showAdminRacePanel(chatID, raceID)
}

// callbackAdminSendNotifications –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
func (b *Bot) callbackAdminSendNotifications(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ (admin_send_notifications:raceID:type)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	notificationType := parts[2]

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	switch notificationType {
	case "cars":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—à–∏–Ω–∞—Ö
		go b.notifyDriversAboutCarAssignments(raceID)
		b.sendMessage(chatID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—à–∏–Ω–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
	case "results":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
		go b.notifyDriversAboutRaceCompletion(raceID)
		b.sendMessage(chatID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
	case "reminder":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–Ω–∫–µ
		go b.sendRaceReminder(raceID)
		b.sendMessage(chatID, "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≥–æ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
	default:
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", false)
}

// callbackRaceDetailedStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceDetailedStatus(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏
	b.showRaceProgress(chatID, raceID)

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)
}

// sendRaceReminder –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–Ω–∫–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–Ω—â–∏–∫–∞–º
func (b *Bot) sendRaceReminder(raceID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		return
	}

	if race == nil {
		log.Println("–ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
	text := fmt.Sprintf("üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥–æ–Ω–∫–µ: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	switch race.State {
	case models.RaceStateNotStarted:
		text += "‚è≥ –ì–æ–Ω–∫–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã."
	case models.RaceStateInProgress:
		text += "üèÅ –ì–æ–Ω–∫–∞ —É–∂–µ –∏–¥–µ—Ç! –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å."
	}

	for _, reg := range registrations {
		var telegramID int64
		err := b.db.QueryRow("SELECT telegram_id FROM drivers WHERE id = $1", reg.DriverID).Scan(&telegramID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
			continue
		}

		var keyboard [][]tgbotapi.InlineKeyboardButton

		switch race.State {
		case models.RaceStateInProgress:
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("my_car:%d", raceID),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("add_result:%d", raceID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
		))

		b.sendMessageWithKeyboard(telegramID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	}
}

func (b *Bot) callbackActiveRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ callback-–∑–∞–ø—Ä–æ—Å–∞
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	parts := strings.Split(query.Data, ":")
	if len(parts) > 1 {
		// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –≥–æ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		raceID, err := strconv.Atoi(parts[1])
		if err == nil {
			// –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ–Ω–∫–∞ –∏ –≤ –Ω—É–∂–Ω–æ–º –ª–∏ –æ–Ω–∞ —Å—Ç–∞—Ç—É—Å–µ
			race, err := b.RaceRepo.GetByID(raceID)
			if err == nil && race != nil && race.State == models.RaceStateInProgress {
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–æ–Ω–∫–µ
				b.showActiveRaceInfo(chatID, race, userID)
				b.deleteMessage(chatID, query.Message.MessageID)
				return
			}
		}
	}

	// –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –≥–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É
	b.handleActiveRace(&message)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ
func (b *Bot) showActiveRaceInfo(chatID int64, race *models.Race, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É
	registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –≥–æ–Ω—â–∏–∫–∞ (–µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
	var carInfo string
	if registered {
		assignment, err := b.CarRepo.GetDriverCarAssignment(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		} else if assignment != nil {
			car := assignment.Car
			carInfo = fmt.Sprintf("\n\n*–í–∞—à–∞ –º–∞—à–∏–Ω–∞:*\nüöó %s (%s)\nüî¢ –ù–æ–º–µ—Ä: %d",
				car.Name, car.Year, assignment.AssignmentNumber)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
			var confirmed bool
			err = b.db.QueryRow(
				"SELECT car_confirmed FROM race_registrations WHERE race_id = $1 AND driver_id = $2",
				race.ID, driver.ID,
			).Scan(&confirmed)

			if err == nil {
				if confirmed {
					carInfo += "\n‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				} else {
					carInfo += "\n‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycar —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
				}
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–µ
	text := fmt.Sprintf("üèÅ *–ê–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n", strings.Join(race.Disciplines, ", "))
	text += fmt.Sprintf("üèÜ –°—Ç–∞—Ç—É—Å: %s\n", getStatusText(race.State))

	if registered {
		text += "\n‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É" + carInfo
	} else {
		text += "\n‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É"
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≥–æ–Ω–∫–∏
	keyboard := ActiveRaceKeyboard(race.ID, registered, race.State, b.IsAdmin(userID))
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

func (b *Bot) callbackSelectDiscipline(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	disciplineName := parts[2]

	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil || driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•á 1 –º–µ—Å—Ç–æ",
				fmt.Sprintf("set_place:%d:%s:1", raceID, disciplineName),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•à 2 –º–µ—Å—Ç–æ",
				fmt.Sprintf("set_place:%d:%s:2", raceID, disciplineName),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•â 3 –º–µ—Å—Ç–æ",
				fmt.Sprintf("set_place:%d:%s:3", raceID, disciplineName),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
				fmt.Sprintf("set_place:%d:%s:0", raceID, disciplineName),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
				fmt.Sprintf("add_result:%d", raceID),
			),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.editMessageWithKeyboard(
		chatID,
		messageID,
		fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s':", disciplineName),
		keyboard,
	)
}

func (b *Bot) callbackSetPlace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	parts := strings.Split(query.Data, ":")
	if len(parts) < 4 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	disciplineName := parts[2]

	place, err := strconv.Atoi(parts[3])
	if err != nil || place < 0 || place > 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ", true)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil || driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–æ–π –≥–æ–Ω–∫–µ
	var resultID int
	var resultsJSON string
	var totalScore int
	var rerollPenalty int

	err = b.db.QueryRow(`
        SELECT id, results, total_score, reroll_penalty 
        FROM race_results 
        WHERE race_id = $1 AND driver_id = $2
    `, raceID, driver.ID).Scan(&resultID, &resultsJSON, &totalScore, &rerollPenalty)

	var results map[string]int

	if err == nil {
		err = json.Unmarshal([]byte(resultsJSON), &results)
		if err != nil {
			b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
			return
		}
	} else {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		results = make(map[string]int)

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
		assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driver.ID)
		if err != nil || assignment == nil {
			b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ", true)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ—Ä–æ–ª–ª–∞
		rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(raceID, driver.ID)
		if err == nil && rerollUsed {
			rerollPenalty = 1
		}
	}

	results[disciplineName] = place

	totalScore = 0
	for _, p := range results {
		switch p {
		case 1:
			totalScore += 3
		case 2:
			totalScore += 2
		case 3:
			totalScore += 1
		}
	}

	if rerollPenalty > 0 {
		totalScore -= rerollPenalty
	}

	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil || race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏", true)
		return
	}

	allDisciplinesFilled := true
	for _, d := range race.Disciplines {
		if _, exists := results[d]; !exists {
			allDisciplinesFilled = false
			break
		}
	}

	if allDisciplinesFilled {
		text := "‚úÖ *–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–∞ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º
		text += "*–í–∞—à–∏ –º–µ—Å—Ç–∞:*\n"
		for _, discipline := range race.Disciplines {
			place := results[discipline]
			emoji := getPlaceEmoji(place)
			text += fmt.Sprintf("‚Ä¢ %s: %s\n", discipline, emoji)
		}

		if rerollPenalty > 0 {
			text += fmt.Sprintf("\n‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", rerollPenalty)
		}

		text += fmt.Sprintf("\nüèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: %d", totalScore)

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ–Ω–∫–µ
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üìä –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏",
					fmt.Sprintf("race_progress:%d", raceID),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
					fmt.Sprintf("race_details:%d", raceID),
				),
			),
		)

		b.editMessageWithKeyboard(chatID, messageID, text, keyboard)
	} else {
		var remainingDisciplines []string
		for _, d := range race.Disciplines {
			if _, exists := results[d]; !exists {
				remainingDisciplines = append(remainingDisciplines, d)
			}
		}

		text := fmt.Sprintf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '%s' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n", disciplineName)
		text += "*–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:*\n"

		for d, p := range results {
			emoji := getPlaceEmoji(p)
			text += fmt.Sprintf("‚Ä¢ %s: %s\n", d, emoji)
		}

		if len(remainingDisciplines) > 0 {
			text += "\n*–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å:*\n"
			for _, d := range remainingDisciplines {
				text += fmt.Sprintf("‚Ä¢ %s\n", d)
			}
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
		var keyboard [][]tgbotapi.InlineKeyboardButton

		for _, d := range remainingDisciplines {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					d,
					fmt.Sprintf("select_discipline:%d:%s", raceID, d),
				),
			))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
				fmt.Sprintf("race_details:%d", raceID),
			),
		))

		b.editMessageWithKeyboard(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	}
}

// showUniversalRaceCard –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω–∫–∏,
// –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–æ–Ω–∫–µ
func (b *Bot) showUniversalRaceCard(chatID int64, raceID int, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ %d: %v", raceID, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		log.Printf("–ì–æ–Ω–∫–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", raceID)
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É
	var isRegistered bool
	var driver *models.Driver

	if driverObj, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driverObj != nil {
		driver = driverObj
		registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
		if err == nil {
			isRegistered = registered
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤ –¥–ª—è –≥–æ–Ω–∫–∏ %d: %v", raceID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
	season, err := b.SeasonRepo.GetByID(race.SeasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ %d: %v", race.SeasonID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	var title string
	switch race.State {
	case models.RaceStateInProgress:
		title = fmt.Sprintf("üèéÔ∏è *–ê–ö–¢–ò–í–ù–ê–Ø –ì–û–ù–ö–ê: %s*", race.Name)
	case models.RaceStateNotStarted:
		title = fmt.Sprintf("‚è≥ *–ü–†–ï–î–°–¢–û–Ø–©–ê–Ø –ì–û–ù–ö–ê: %s*", race.Name)
	case models.RaceStateCompleted:
		title = fmt.Sprintf("‚úÖ *–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –ì–û–ù–ö–ê: %s*", race.Name)
	default:
		title = fmt.Sprintf("üèÅ *–ì–û–ù–ö–ê: %s*", race.Name)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
	text := title + "\n\n"

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
	if season != nil {
		text += fmt.Sprintf("üèÜ –°–µ–∑–æ–Ω: %s\n", season.Name)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if driver != nil {
		if isRegistered {
			text += "‚úÖ *–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É*\n\n"

			// –ï—Å–ª–∏ –≥–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
			if race.State == models.RaceStateInProgress {
				carAssignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driver.ID)
				if err == nil && carAssignment != nil {
					text += "*–í–∞—à–∞ –º–∞—à–∏–Ω–∞:*\n"
					text += fmt.Sprintf("üöó %s (%s)\n", carAssignment.Car.Name, carAssignment.Car.Year)
					text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n\n", carAssignment.AssignmentNumber)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
					var confirmed bool
					err = b.db.QueryRow(`
						SELECT car_confirmed FROM race_registrations 
						WHERE race_id = $1 AND driver_id = $2
					`, raceID, driver.ID).Scan(&confirmed)

					if err == nil {
						if confirmed {
							text += "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
						} else {
							text += "‚ö†Ô∏è *–ú–∞—à–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ—è –º–∞—à–∏–Ω–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
						}
					}
				}
			}
		} else if race.State == models.RaceStateNotStarted {
			text += "‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É*\n"
			text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –Ω–∏–∂–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è\n\n"
		}
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
	if len(registrations) > 0 {
		text += fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ (%d):*\n", len(registrations))

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
		showLimit := 8
		showAll := len(registrations) <= showLimit

		for i, reg := range registrations {
			if !showAll && i >= showLimit {
				break
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫
			if race.State == models.RaceStateInProgress {
				var carConfirmed bool
				err = b.db.QueryRow(`
					SELECT car_confirmed FROM race_registrations 
					WHERE race_id = $1 AND driver_id = $2
				`, raceID, reg.DriverID).Scan(&carConfirmed)

				if err == nil && carConfirmed {
					text += fmt.Sprintf("‚Ä¢ %s ‚úÖ\n", reg.DriverName)
				} else {
					text += fmt.Sprintf("‚Ä¢ %s ‚è≥\n", reg.DriverName)
				}
			} else {
				text += fmt.Sprintf("‚Ä¢ %s\n", reg.DriverName)
			}
		}

		if !showAll {
			text += fmt.Sprintf("...–∏ –µ—â–µ %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n", len(registrations)-showLimit)
		}

		text += "\n"
	} else {
		text += "üë®‚ÄçüèéÔ∏è *–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤*\n\n"
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	switch race.State {
	case models.RaceStateInProgress:
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		var confirmedCount int
		for _, reg := range registrations {
			var carConfirmed bool
			err = b.db.QueryRow(`
				SELECT car_confirmed FROM race_registrations 
				WHERE race_id = $1 AND driver_id = $2
			`, raceID, reg.DriverID).Scan(&carConfirmed)

			if err == nil && carConfirmed {
				confirmedCount++
			}
		}

		text += fmt.Sprintf("‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–∞—à–∏–Ω:* %d –∏–∑ %d\n", confirmedCount, len(registrations))

		resultCount, _ := b.ResultRepo.GetResultCountByRaceID(raceID)
		text += fmt.Sprintf("üìä *–ü–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:* %d –∏–∑ %d\n", resultCount, len(registrations))

	case models.RaceStateNotStarted:
		// –í—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏
		timeDiff := race.Date.Sub(time.Now())
		if timeDiff > 0 {
			days := int(timeDiff.Hours() / 24)
			hours := int(timeDiff.Hours()) % 24

			if days > 0 {
				text += fmt.Sprintf("‚è±Ô∏è *–î–æ –Ω–∞—á–∞–ª–∞:* %d –¥–Ω–µ–π %d —á–∞—Å–æ–≤\n", days, hours)
			} else {
				text += fmt.Sprintf("‚è±Ô∏è *–î–æ –Ω–∞—á–∞–ª–∞:* %d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç\n", hours, int(timeDiff.Minutes())%60)
			}
		}

	case models.RaceStateCompleted:
		// –¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
		results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(raceID)
		if err == nil && len(results) > 0 {
			text += "üèÜ *–¢–æ–ø-3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:*\n"

			count := len(results)
			if count > 3 {
				count = 3
			}

			for i := 0; i < count; i++ {
				text += fmt.Sprintf("%d. *%s* - %d –æ—á–∫–æ–≤\n", i+1, results[i].DriverName, results[i].TotalScore)
			}

			text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	switch race.State {
	case models.RaceStateInProgress:
		// –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫
		if driver != nil && isRegistered {
			// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("my_car:%d", raceID),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("add_result:%d", raceID),
				),
			))
		}

		// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))

	case models.RaceStateNotStarted:
		// –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫
		if driver != nil {
			if isRegistered {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
						fmt.Sprintf("unregister_race:%d", raceID),
					),
				))
			} else {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
						fmt.Sprintf("register_race:%d", raceID),
					),
				))
			}
		}

		// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		if len(registrations) > 0 {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üë®‚ÄçüèéÔ∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
					fmt.Sprintf("race_registrations:%d", raceID),
				),
			))
		}

	case models.RaceStateCompleted:
		// –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("race_results:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))
	}

	// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	if b.IsAdmin(userID) {
		var adminRow []tgbotapi.InlineKeyboardButton

		switch race.State {
		case models.RaceStateNotStarted:
			adminRow = append(adminRow, tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			))
		case models.RaceStateInProgress:
			adminRow = append(adminRow, tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			))
		}

		if len(adminRow) > 0 {
			keyboard = append(keyboard, adminRow)
		}

		// –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
				fmt.Sprintf("admin_race_panel:%d", raceID),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–∞–º"
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–∞–º",
			"races",
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}
