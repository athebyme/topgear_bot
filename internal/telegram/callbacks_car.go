package telegram

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// callbackCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω
func (b *Bot) callbackCars(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /cars
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClass(query *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /carclass
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
		Text: fmt.Sprintf("/carclass %s", classLetter),
	}

	b.handleCarClass(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClassAll –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClassAll(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	class := models.GetCarClassByLetter(classLetter)
	if class == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω
	text := fmt.Sprintf("üöó *–í—Å–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s*\n\n", class.Name)
	text += fmt.Sprintf("–í—Å–µ–≥–æ –º–∞—à–∏–Ω: %d\n\n", len(cars))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	var carLines []string
	for i, car := range cars {
		line := fmt.Sprintf("%d. *%s (%d)* - %d CR\n", i+1, car.Name, car.Year, car.Price)
		carLines = append(carLines, line)
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	joinedText := text
	maxLength := 4000 // –ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

	for _, line := range carLines {
		if len(joinedText)+len(line) > maxLength {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
			b.sendMessage(chatID, joinedText)
			joinedText = ""
		}
		joinedText += line
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
	if joinedText != "" {
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–ª–∞—Å—Å–∞–º
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("random_car:%s", classLetter),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
					"cars",
				),
			),
		)

		b.sendMessageWithKeyboard(chatID, joinedText, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRandomCar –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–π –º–∞—à–∏–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackRandomCar(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—à–∏–Ω—É
	car := cars[rand.Intn(len(cars))]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
	text := fmt.Sprintf("üöó *%s (%d)*\n\n", car.Name, car.Year)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n", car.ClassLetter, car.ClassNumber)
	text += fmt.Sprintf("üìç –ò—Å—Ç–æ—á–Ω–∏–∫: %s", car.Source)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üé≤ –ï—â–µ —Å–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("random_car:%s", classLetter),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å—É",
				fmt.Sprintf("car_class:%s", classLetter),
			),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	if car.ImageURL != "" {
		b.sendPhotoWithKeyboard(chatID, car.ImageURL, text, keyboard)
	} else {
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackUpdateCarsDB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –º–∞—à–∏–Ω
func (b *Bot) callbackUpdateCarsDB(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω", true)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	b.sendMessage(chatID, "üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
	time.Sleep(3 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ë–∞–∑–∞ –º–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRaceAssignCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceAssignCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	carClass := parts[2]

	// –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã
	err = b.assignRandomCarsForRace(raceID, carClass)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ú–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackViewRaceCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackViewRaceCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// registerRaceFlowCallbackHandlers registers callbacks for race flow
func (b *Bot) registerRaceFlowCallbackHandlers() {
	b.CallbackHandlers["register_race"] = b.callbackRegisterRace
	b.CallbackHandlers["unregister_race"] = b.callbackUnregisterRace
	b.CallbackHandlers["start_race"] = b.callbackStartRace
	b.CallbackHandlers["confirm_car"] = b.callbackConfirmCar
	b.CallbackHandlers["reroll_car"] = b.callbackRerollCar
	b.CallbackHandlers["race_registrations"] = b.callbackRaceRegistrations
	b.CallbackHandlers["race_start_confirm"] = b.callbackRaceStartConfirm
	b.CallbackHandlers["complete_race_confirm"] = b.callbackCompleteRaceConfirm
	b.CallbackHandlers["race_details"] = b.callbackRaceDetails
}

// showRaceCarAssignments –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) showRaceCarAssignments(chatID int64, raceID int, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
	assignments, err := b.CarRepo.GetRaceCarAssignments(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
	text := fmt.Sprintf("üèÅ *–ú–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s (%s)\n\n", race.CarClass, models.GetCarClassName(race.CarClass))

	if len(assignments) == 0 {
		text += "‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏."
	} else {
		for _, assignment := range assignments {
			text += fmt.Sprintf("*%s*\n", assignment.DriverName)
			text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
			// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º %s –≤–º–µ—Å—Ç–æ %d –¥–ª—è Car.Year, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
			text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (%s)\n", assignment.Car.Name, assignment.Car.Year)
			text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", assignment.Car.Rarity)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
	if b.IsAdmin(userID) {
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –º–∞—à–∏–Ω
		var classButtons [][]tgbotapi.InlineKeyboardButton

		for _, class := range models.CarClasses {
			classButtons = append(classButtons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("üé≤ –ù–∞–∑–Ω–∞—á–∏—Ç—å %s", class.Name),
					fmt.Sprintf("race_assign_cars:%d:%s", race.ID, class.Letter),
				),
			))
		}

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –≥—Ä—É–ø–ø—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
		for i := 0; i < len(classButtons); i += 2 {
			if i+1 < len(classButtons) {
				// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
				row := append(classButtons[i], classButtons[i+1]...)
				keyboard = append(keyboard, row)
			} else {
				// –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
				keyboard = append(keyboard, classButtons[i])
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ–Ω–∫–µ
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_results:%d", race.ID),
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

func (b *Bot) callbackRaceDetails(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Show race details including registration options
	b.showRaceDetails(chatID, raceID, userID)

	// Answer the callback query
	b.answerCallbackQuery(query.ID, "", false)

	// Remove the original message
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Updated callback handler for race unregistrations
func (b *Bot) callbackUnregisterRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is still open for registration changes
	if race.State != models.RaceStateNotStarted {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", true)
		return
	}

	// Check if driver is registered
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	if !registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		return
	}

	// Unregister driver from the race
	err = b.RaceRepo.UnregisterDriver(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞", false)

	// Show updated race details
	b.showRaceDetails(chatID, raceID, userID)

	// Delete the original message
	b.deleteMessage(chatID, messageID)
}

// Enhanced callbackStartRace for better race management
func (b *Bot) callbackStartRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is not started yet
	if race.State != models.RaceStateNotStarted {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true)
		return
	}

	// Get registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", true)
		return
	}

	if len(registrations) == 0 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏", true)
		return
	}

	// Show confirmation dialog with registered drivers list
	text := fmt.Sprintf("üèÅ *–ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += "*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:*\n\n"

	for i, reg := range registrations {
		text += fmt.Sprintf("%d. %s\n", i+1, reg.DriverName)
	}

	text += "\n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–∞—à–∏–Ω—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("race_start_confirm:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –û—Ç–º–µ–Ω–∞",
				"cancel",
			),
		),
	)

	b.sendMessageWithKeyboard(chatID, text, keyboard)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Enhanced callbackRaceStartConfirm with better notifications
func (b *Bot) callbackRaceStartConfirm(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is not started yet
	//if race.State != models.RaceStateNotStarted {
	//	b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true)
	//	return
	//}

	// Start a database transaction
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Start the race
	err = b.RaceRepo.StartRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Assign cars to registered drivers
	_, err = b.CarRepo.AssignCarsToRegisteredDrivers(tx, raceID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω", true)
		return
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!", false)

	// Send success message
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Ö –º–∞—à–∏–Ω–∞–º–∏.", race.Name))

	// Notify all drivers about their cars
	go b.notifyDriversAboutCarAssignments(raceID)

	// Show race details
	b.showRaceDetails(chatID, raceID, userID)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Add admin ability to confirm cars for drivers
func (b *Bot) callbackAdminConfirmCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã", true)
		return
	}

	// Parse parameters from callback data (admin_confirm_car:raceID:driverID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driverID, err := strconv.Atoi(parts[2])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// Confirm car for the driver
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driverID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", false)

	// Show updated registrations
	b.callbackRaceRegistrations(&tgbotapi.CallbackQuery{
		Data: fmt.Sprintf("race_registrations:%d", raceID),
		From: query.From,
		Message: &tgbotapi.Message{
			Chat: query.Message.Chat,
		},
	})
}

// callbackConfirmCar handles confirmation of assigned car
func (b *Bot) callbackConfirmCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	// Check if driver is registered for this race
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	if !registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		return
	}

	// Confirm car
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driver.ID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", false)

	// Update the message to remove buttons
	b.editMessage(
		chatID,
		messageID,
		query.Message.Text+"\n\n‚úÖ *–ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*",
	)
}

// callbackRaceRegistrations shows list of registered drivers for admin
func (b *Bot) callbackRaceRegistrations(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Get registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", true)
		return
	}

	// Format message with registrations
	text := fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)

	if len(registrations) == 0 {
		text += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
	} else {
		for i, reg := range registrations {
			var status string
			if race.State == models.RaceStateInProgress || race.State == models.RaceStateCompleted {
				if reg.CarConfirmed {
					status = "‚úÖ –º–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				} else {
					status = "‚è≥ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã"
				}

				if reg.RerollUsed {
					status += ", üé≤ —Ä–µ—Ä–æ–ª–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
				}
			} else {
				status = "‚è≥ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏"
			}

			text += fmt.Sprintf("%d. *%s* - %s\n", i+1, reg.DriverName, status)
		}
	}

	// Create appropriate keyboard based on race state
	var keyboard [][]tgbotapi.InlineKeyboardButton

	switch race.State {
	case models.RaceStateNotStarted:
		// Add start race button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			),
		))
	case models.RaceStateInProgress:
		// Add complete race button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_results:%d", raceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackCompleteRaceConfirm handles confirmation of race completion
func (b *Bot) callbackCompleteRaceConfirm(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is in progress
	if race.State != models.RaceStateInProgress {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true)
		return
	}

	// Check if there are any results
	results, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	if results == 0 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏", true)
		return
	}

	// Start a database transaction
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Complete the race
	err = b.RaceRepo.CompleteRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", false)

	// Send success message
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.", race.Name))

	// Notify all drivers about race completion
	go b.notifyDriversAboutRaceCompletion(raceID)

	// Show race results
	b.showRaceResults(chatID, raceID)
	b.deleteMessage(chatID, query.Message.MessageID)
}

func (b *Bot) showRaceDetails(chatID int64, raceID int, userID int64) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return
	}

	// Format message with race details
	text := fmt.Sprintf("üèÅ *–ì–æ–Ω–∫–∞: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	// Add race state
	switch race.State {
	case models.RaceStateNotStarted:
		text += "‚è≥ *–°—Ç–∞—Ç—É—Å: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
	case models.RaceStateInProgress:
		text += "üèéÔ∏è *–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ*\n\n"
	case models.RaceStateCompleted:
		text += "‚úÖ *–°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
	}

	// Add registered drivers
	text += "*–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n\n"
	if len(registrations) == 0 {
		text += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
	} else {
		for i, reg := range registrations {
			text += fmt.Sprintf("%d. %s\n", i+1, reg.DriverName)
		}
	}

	// Check if the current user is registered for this race
	var isRegistered bool = false
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err == nil && driver != nil {
		registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
		if err == nil {
			isRegistered = registered
		}
	}

	// Create keyboard based on race state and registration status
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Only add registration options for races that haven't started yet
	if race.State == models.RaceStateNotStarted && driver != nil {
		if isRegistered {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
					fmt.Sprintf("unregister_race:%d", raceID),
				),
			))
		} else if race.State == models.RaceStateInProgress {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–Ω–∫–∏",
					fmt.Sprintf("race_progress:%d", raceID),
				),
			))
		} else {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
					fmt.Sprintf("register_race:%d", raceID),
				),
			))
		}
	}

	// Add race management buttons for admins
	if b.IsAdmin(userID) {
		switch race.State {
		case models.RaceStateNotStarted:
			// Show manage registrations button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üë®‚ÄçüèéÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
					fmt.Sprintf("race_registrations:%d", raceID),
				),
			))

			// Add start race button if there are registrations
			if len(registrations) > 0 {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
						fmt.Sprintf("start_race:%d", raceID),
					),
				))
			}
		case models.RaceStateInProgress:
			// Show manage registrations button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üë®‚ÄçüèéÔ∏è –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
					fmt.Sprintf("race_registrations:%d", raceID),
				),
			))

			// Add view cars button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("view_race_cars:%d", raceID),
				),
			))

			// Add complete race button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("complete_race:%d", raceID),
				),
			))
		}

		// Add edit and delete buttons
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
				fmt.Sprintf("edit_race:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
				fmt.Sprintf("delete_race:%d", raceID),
			),
		))
	} else {
		// Regular user buttons based on race state
		if race.State == models.RaceStateInProgress {
			// Only show these if user is registered
			if isRegistered {
				// Add my car button
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
						fmt.Sprintf("my_car:%d", raceID),
					),
				))

				// Add add result button
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
						fmt.Sprintf("add_result:%d", raceID),
					),
				))
			}

			// Add view cars button (for everyone)
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("view_race_cars:%d", raceID),
				),
			))
		} else if race.State == models.RaceStateCompleted {
			// Add view results button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
					fmt.Sprintf("race_results:%d", raceID),
				),
			))

			// Add view cars button
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("view_race_cars:%d", raceID),
				),
			))
		}
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			fmt.Sprintf("season_races:%d", race.SeasonID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

func (b *Bot) callbackRerollCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if driver is registered for this race
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	if !registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		return
	}

	// Check if reroll was already used
	rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞", true)
		return
	}

	if rerollUsed {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π —Ä–µ—Ä–æ–ª–ª –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ", true)
		return
	}

	// Start a database transaction
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ –º–∞—à–∏–Ω—ã", true)
		return
	}

	// Reroll car
	carAssignment, err := b.CarRepo.RerollCarForDriver(tx, raceID, driver.ID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ—Ä–æ–ª–ª–∞ –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ –º–∞—à–∏–Ω—ã", true)
		return
	}

	// Apply reroll penalty to results (if results already exist)
	err = b.ResultRepo.ApplyRerollPenaltyToResult(tx, raceID, driver.ID, 1)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Ä–µ—Ä–æ–ª–ª: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —Ä–µ—Ä–æ–ª–ª", true)
		return
	}

	// Mark car as confirmed
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driver.ID, true)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ—Ä–æ–ª–ª–∞", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ—Ä–æ–ª–ª–∞!", false)

	// Format new car information
	car := carAssignment.Car
	text := fmt.Sprintf("üöó *–í–∞—à–∞ –Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("*%s (%s)*\n", car.Name, car.Year)
	text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", carAssignment.AssignmentNumber)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n\n", car.ClassLetter, car.ClassNumber)
	text += "‚ö†Ô∏è *–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π —Ä–µ—Ä–æ–ª–ª –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ. -1 –±–∞–ª–ª –±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.*\n\n"
	text += "‚úÖ *–ú–∞—à–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*"

	// Send the message with the new car
	if car.ImageURL != "" {
		b.sendPhoto(chatID, car.ImageURL, text)
	} else {
		b.sendMessage(chatID, text)
	}

	// Delete the original message
	b.deleteMessage(chatID, messageID)
}
