package telegram

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// callbackCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω
func (b *Bot) callbackCars(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /cars
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClass(query *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /carclass
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
		Text: fmt.Sprintf("/carclass %s", classLetter),
	}

	b.handleCarClass(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClassAll –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClassAll(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	class := models.GetCarClassByLetter(classLetter)
	if class == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω
	text := fmt.Sprintf("üöó *–í—Å–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s*\n\n", class.Name)
	text += fmt.Sprintf("–í—Å–µ–≥–æ –º–∞—à–∏–Ω: %d\n\n", len(cars))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	var carLines []string
	for i, car := range cars {
		line := fmt.Sprintf("%d. *%s (%d)* - %d CR\n", i+1, car.Name, car.Year, car.Price)
		carLines = append(carLines, line)
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	joinedText := text
	maxLength := 4000 // –ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

	for _, line := range carLines {
		if len(joinedText)+len(line) > maxLength {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
			b.sendMessage(chatID, joinedText)
			joinedText = ""
		}
		joinedText += line
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
	if joinedText != "" {
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–ª–∞—Å—Å–∞–º
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("random_car:%s", classLetter),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
					"cars",
				),
			),
		)

		b.sendMessageWithKeyboard(chatID, joinedText, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRandomCar –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–π –º–∞—à–∏–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackRandomCar(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—à–∏–Ω—É
	car := cars[rand.Intn(len(cars))]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
	text := fmt.Sprintf("üöó *%s (%d)*\n\n", car.Name, car.Year)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n", car.ClassLetter, car.ClassNumber)
	text += fmt.Sprintf("üìç –ò—Å—Ç–æ—á–Ω–∏–∫: %s", car.Source)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üé≤ –ï—â–µ —Å–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("random_car:%s", classLetter),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å—É",
				fmt.Sprintf("car_class:%s", classLetter),
			),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	if car.ImageURL != "" {
		b.sendPhotoWithKeyboard(chatID, car.ImageURL, text, keyboard)
	} else {
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackUpdateCarsDB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –º–∞—à–∏–Ω
func (b *Bot) callbackUpdateCarsDB(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω", true)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	b.sendMessage(chatID, "üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
	time.Sleep(3 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ë–∞–∑–∞ –º–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRaceAssignCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceAssignCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	carClass := parts[2]

	// –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã
	err = b.assignRandomCarsForRace(raceID, carClass)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ú–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackViewRaceCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackViewRaceCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// showRaceCarAssignments –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) showRaceCarAssignments(chatID int64, raceID int, userID int64) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get car assignments
	assignments, err := b.CarRepo.GetRaceCarAssignments(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω.")
		return
	}

	// Check if user is admin or a participant with confirmed car
	isAdmin := b.IsAdmin(userID)

	var isParticipant bool
	var hasConfirmedCar bool

	if !isAdmin {
		// Check if user is a participant
		driver, err := b.DriverRepo.GetByTelegramID(userID)
		if err == nil && driver != nil {
			// Check if driver is registered for this race
			isRegistered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
			if err == nil && isRegistered {
				isParticipant = true

				// Check if driver has confirmed their car
				err = b.db.QueryRow(`
                    SELECT car_confirmed FROM race_registrations
                    WHERE race_id = $1 AND driver_id = $2
                `, raceID, driver.ID).Scan(&hasConfirmedCar)

				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
					hasConfirmedCar = false
				}
			}
		}
	}

	// Format message with assignments
	text := fmt.Sprintf("üèÅ *–ú–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s (%s)\n\n", race.CarClass, models.GetCarClassName(race.CarClass))

	if len(assignments) == 0 {
		text += "‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏."
	} else if isAdmin || race.State == models.RaceStateCompleted {
		// Show all cars to admins or if race is completed
		for _, assignment := range assignments {
			text += fmt.Sprintf("*%s*\n", assignment.DriverName)
			text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
			text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (%s)\n", assignment.Car.Name, assignment.Car.Year)
			text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", assignment.Car.Rarity)
		}
	} else if isParticipant && race.State == models.RaceStateInProgress {
		// For participants in a race that's in progress

		// First get all confirmations to check if all participants have confirmed
		var allConfirmed bool = true
		var confirmedCount int = 0

		registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
		if err == nil {
			for _, reg := range registrations {
				if reg.CarConfirmed {
					confirmedCount++
				} else {
					allConfirmed = false
				}
			}
		}

		// If the participant has confirmed their car and either all cars are confirmed
		// or the admin has explicitly made cars visible
		if hasConfirmedCar && (allConfirmed || confirmedCount > len(registrations)/2) {
			for _, assignment := range assignments {
				text += fmt.Sprintf("*%s*\n", assignment.DriverName)
				text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
				text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (%s)\n", assignment.Car.Name, assignment.Car.Year)
				text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", assignment.Car.Rarity)
			}
		} else {
			text += "‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –≥–æ–Ω—â–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä."

			// Show at least their own car
			driver, err := b.DriverRepo.GetByTelegramID(userID)
			if err == nil && driver != nil {
				for _, assignment := range assignments {
					if assignment.DriverID == driver.ID {
						text += "\n\n*–í–∞—à–∞ –º–∞—à–∏–Ω–∞:*\n"
						text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
						text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (%s)\n", assignment.Car.Name, assignment.Car.Year)
						text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n", assignment.Car.Rarity)
						break
					}
				}
			}
		}
	} else {
		text += "‚ö†Ô∏è –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏."
	}

	// Create keyboard with additional actions
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add buttons for admins
	if isAdmin {
		if race.State == models.RaceStateInProgress {
			// Add buttons for forcing confirmation of all cars
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("admin_confirm_all_cars:%d", raceID),
				),
			))
		}

		// Admin can send car notifications again
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—à–∏–Ω–∞—Ö",
				fmt.Sprintf("admin_send_notifications:%d:cars", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	// Send message with keyboard
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// callbackRaceDetails –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—è–º –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceDetails(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	if b.IsAdmin(userID) && race.State == models.RaceStateInProgress {
		b.showAdminRacePanel(chatID, raceID)
		b.deleteMessage(chatID, query.Message.MessageID)
		return
	}

	b.showUniversalRaceCard(chatID, raceID, userID)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Updated callback handler for race unregistrations
func (b *Bot) callbackUnregisterRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is still open for registration changes
	if race.State != models.RaceStateNotStarted {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", true)
		return
	}

	// Check if driver is registered
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	if !registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		return
	}

	// Unregister driver from the race
	err = b.RaceRepo.UnregisterDriver(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞", false)

	// Show updated race details
	b.showRaceDetails(chatID, raceID, userID)

	// Delete the original message
	b.deleteMessage(chatID, messageID)
}

// callbackStartRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (b *Bot) callbackStartRace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
	b.answerCallbackQuery(query.ID, "‚è≥ –ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏...", false)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏")
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
		return
	}

	if len(registrations) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏")
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏")
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–Ω–∫—É: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
	err = b.RaceRepo.StartRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err))
		return
	}

	// –ù–∞–∑–Ω–∞—á–∞–µ–º –º–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	_, err = b.CarRepo.AssignCarsToRegisteredDrivers(tx, raceID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err))
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
	successMsg := b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Ö –º–∞—à–∏–Ω–∞–º–∏.", race.Name))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go b.notifyDriversAboutCarAssignments(raceID)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	b.deleteMessage(chatID, messageID)

	// –í–∞–∂–Ω–æ: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏
	b.showAdminRacePanel(chatID, raceID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
	go func() {
		time.Sleep(5 * time.Second)
		b.deleteMessage(chatID, successMsg.MessageID)
	}()
}

// Enhanced callbackRaceStartConfirm with better notifications
func (b *Bot) callbackRaceStartConfirm(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is not started yet
	//if race.State != models.RaceStateNotStarted {
	//	b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true)
	//	return
	//}

	// Start a database transaction
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Start the race
	err = b.RaceRepo.StartRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Assign cars to registered drivers
	_, err = b.CarRepo.AssignCarsToRegisteredDrivers(tx, raceID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω", true)
		return
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–ø—É—Å–∫–∞ –≥–æ–Ω–∫–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!", false)

	// Send success message
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Ö –º–∞—à–∏–Ω–∞–º–∏.", race.Name))

	// Notify all drivers about their cars
	go b.notifyDriversAboutCarAssignments(raceID)

	// Show race details
	b.showRaceDetails(chatID, raceID, userID)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// Add admin ability to confirm cars for drivers
func (b *Bot) callbackAdminConfirmCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã", true)
		return
	}

	// Parse parameters from callback data (admin_confirm_car:raceID:driverID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driverID, err := strconv.Atoi(parts[2])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// Confirm car for the driver
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driverID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", false)

	// Show updated registrations
	b.callbackRaceRegistrations(&tgbotapi.CallbackQuery{
		Data: fmt.Sprintf("race_registrations:%d", raceID),
		From: query.From,
		Message: &tgbotapi.Message{
			Chat: query.Message.Chat,
		},
	})
}

func (b *Bot) callbackConfirmCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: %d", userID)

	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	if driver == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		return
	}

	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		return
	}

	if !registered {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ —É–∂–µ –≥–æ–Ω—â–∏–∫ —Å–≤–æ—é –º–∞—à–∏–Ω—É
	var alreadyConfirmed bool
	err = b.db.QueryRow(`
		SELECT car_confirmed FROM race_registrations
		WHERE race_id = $1 AND driver_id = $2
	`, raceID, driver.ID).Scan(&alreadyConfirmed)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
	} else if alreadyConfirmed {
		log.Printf("–ì–æ–Ω—â–∏–∫ %d (ID: %d) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—à–∏–Ω—É –≤ –≥–æ–Ω–∫–µ %d",
			driver.ID, userID, raceID)
		b.answerCallbackQuery(query.ID, "–ú–∞—à–∏–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", true)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driver.ID, true)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		return
	}

	log.Printf("–ì–æ–Ω—â–∏–∫ %d (ID: %d) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –º–∞—à–∏–Ω—É –≤ –≥–æ–Ω–∫–µ %d",
		driver.ID, userID, raceID)

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", false)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	car, err := b.CarRepo.GetDriverCarAssignment(raceID, driver.ID)
	if err == nil && car != nil {
		race, err := b.RaceRepo.GetByID(raceID)
		raceName := "—Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏"
		if err == nil && race != nil {
			raceName = race.Name
		}

		text := fmt.Sprintf("üöó *–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", raceName)
		text += fmt.Sprintf("*%s (%s)*\n", car.Car.Name, car.Car.Year)
		text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", car.AssignmentNumber)
		text += fmt.Sprintf("‚úÖ *–ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n")

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üìä –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏",
					fmt.Sprintf("race_progress:%d", raceID),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
					fmt.Sprintf("race_details:%d", raceID),
				),
			),
		)

		if car.Car.ImageURL != "" {
			b.sendPhotoWithKeyboard(chatID, car.Car.ImageURL, text, keyboard)
		} else {
			b.sendMessageWithKeyboard(chatID, text, keyboard)
		}
	}

	b.deleteMessage(chatID, messageID)

	b.checkAllCarsConfirmed(raceID)

	b.notifyAdminsAboutCarConfirmation(raceID, driver.ID)
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—à–∏–Ω
func (b *Bot) checkAllCarsConfirmed(raceID int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: %v", err)
		return
	}

	if len(registrations) == 0 {
		return
	}

	log.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω: –≥–æ–Ω–∫–∞ ID=%d, –≤—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d", raceID, len(registrations))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –º–∞—à–∏–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
	allConfirmed := true
	confirmedCount := 0

	for _, reg := range registrations {
		if reg.CarConfirmed {
			confirmedCount++
		} else {
			allConfirmed = false
		}
	}

	log.Printf("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–∞—à–∏–Ω: %d –∏–∑ %d, –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: %v",
		confirmedCount, len(registrations), allConfirmed)

	if allConfirmed && confirmedCount > 0 {
		race, err := b.RaceRepo.GetByID(raceID)
		if err != nil || race == nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
			return
		}

		if race.State == models.RaceStateInProgress {
			log.Printf("–í—Å–µ –º–∞—à–∏–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ %d (%s). –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
				raceID, race.Name)

			for _, reg := range registrations {
				var telegramID int64
				err := b.db.QueryRow("SELECT telegram_id FROM drivers WHERE id = $1", reg.DriverID).Scan(&telegramID)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
					continue
				}

				log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—à–∏–Ω –≥–æ–Ω—â–∏–∫—É %d (Telegram ID: %d)",
					reg.DriverID, telegramID)

				message := fmt.Sprintf("üèÅ *–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–∏ –º–∞—à–∏–Ω—ã!*\n\n–ì–æ–Ω–∫–∞ '%s' –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–∞—à–∏–Ω—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", race.Name)
				b.sendMessage(telegramID, message)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
			for adminID := range b.AdminIDs {
				log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: %d", adminID)
				b.sendMessage(adminID, fmt.Sprintf("üèÅ *–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–∏ –º–∞—à–∏–Ω—ã –≤ –≥–æ–Ω–∫–µ '%s'!*", race.Name))
			}
		}
	}
}

func (b *Bot) notifyAdminsAboutCarConfirmation(raceID int, driverID int) {
	// Get driver information
	var driverName string
	err := b.db.QueryRow("SELECT name FROM drivers WHERE id = $1", driverID).Scan(&driverName)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		return
	}

	if race == nil {
		return
	}

	// Get admins
	for adminID := range b.AdminIDs {
		b.sendMessage(adminID, fmt.Sprintf("‚úÖ –ì–æ–Ω—â–∏–∫ *%s* –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –≤ –≥–æ–Ω–∫–µ '%s'",
			driverName, race.Name))
	}
}

// callbackRaceRegistrations shows list of registered drivers for admin
func (b *Bot) callbackRaceRegistrations(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Get registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", true)
		return
	}

	// Format message with registrations
	text := fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)

	if len(registrations) == 0 {
		text += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
	} else {
		for i, reg := range registrations {
			var status string
			if race.State == models.RaceStateInProgress || race.State == models.RaceStateCompleted {
				if reg.CarConfirmed {
					status = "‚úÖ –º–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				} else {
					status = "‚è≥ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã"
				}

				if reg.RerollUsed {
					status += ", üé≤ —Ä–µ—Ä–æ–ª–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
				}
			} else {
				status = "‚è≥ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏"
			}

			text += fmt.Sprintf("%d. *%s* - %s\n", i+1, reg.DriverName, status)
		}
	}

	// Create appropriate keyboard based on race state
	var keyboard [][]tgbotapi.InlineKeyboardButton

	switch race.State {
	case models.RaceStateNotStarted:
		// Add start race button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			),
		))
	case models.RaceStateInProgress:
		// Add complete race button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_results:%d", raceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackCompleteRaceConfirm handles confirmation of race completion
func (b *Bot) callbackCompleteRaceConfirm(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Check if race is in progress
	if race.State != models.RaceStateInProgress {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", true)
		return
	}

	// Check if there are any results
	results, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	if results == 0 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏", true)
		return
	}

	// Start a database transaction
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Complete the race
	err = b.RaceRepo.CompleteRace(tx, raceID)
	if err != nil {
		tx.Rollback()
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏", true)
		return
	}

	// Commit the transaction
	err = tx.Commit()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏", true)
		return
	}

	b.answerCallbackQuery(query.ID, "‚úÖ –ì–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", false)

	// Send success message
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –ì–æ–Ω–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.", race.Name))

	// Notify all drivers about race completion
	go b.notifyDriversAboutRaceCompletion(raceID)

	// Show race results
	b.showRaceResults(chatID, raceID)
	b.deleteMessage(chatID, query.Message.MessageID)
}

// showRaceDetails –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
func (b *Bot) showRaceDetails(chatID int64, raceID int, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ %d: %v", raceID, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		log.Printf("–ì–æ–Ω–∫–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", raceID)
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É
	var isRegistered bool
	var driver *models.Driver

	if driverObj, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driverObj != nil {
		driver = driverObj
		registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
		if err == nil {
			isRegistered = registered
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤ –¥–ª—è –≥–æ–Ω–∫–∏ %d: %v", raceID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
	season, err := b.SeasonRepo.GetByID(race.SeasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ %d: %v", race.SeasonID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	var text string

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	switch race.State {
	case models.RaceStateInProgress:
		text = fmt.Sprintf("üèéÔ∏è *–ê–ö–¢–ò–í–ù–ê–Ø –ì–û–ù–ö–ê: %s*\n\n", race.Name)
	case models.RaceStateNotStarted:
		text = fmt.Sprintf("‚è≥ *–ü–†–ï–î–°–¢–û–Ø–©–ê–Ø –ì–û–ù–ö–ê: %s*\n\n", race.Name)
	case models.RaceStateCompleted:
		text = fmt.Sprintf("‚úÖ *–ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –ì–û–ù–ö–ê: %s*\n\n", race.Name)
	default:
		text = fmt.Sprintf("üèÅ *–ì–û–ù–ö–ê: %s*\n\n", race.Name)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if season != nil {
		text += fmt.Sprintf("üèÜ –°–µ–∑–æ–Ω: %s\n", season.Name)
	}

	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–Ω–∫–µ
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å –º–∞—à–∏–Ω: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if driver != nil {
		if isRegistered {
			text += "‚úÖ *–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É*\n\n"

			// –ï—Å–ª–∏ –≥–æ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
			if race.State == models.RaceStateInProgress {
				assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driver.ID)
				if err == nil && assignment != nil {
					text += "*–í–∞—à–∞ –º–∞—à–∏–Ω–∞:*\n"
					text += fmt.Sprintf("üöó %s\n", assignment.Car.Name)
					text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n\n", assignment.AssignmentNumber)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
					var confirmed bool
					err = b.db.QueryRow(`
						SELECT car_confirmed FROM race_registrations 
						WHERE race_id = $1 AND driver_id = $2
					`, raceID, driver.ID).Scan(&confirmed)

					if err == nil {
						if confirmed {
							text += "‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
						} else {
							text += "‚ö†Ô∏è *–ú–∞—à–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–æ—è –º–∞—à–∏–Ω–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
						}
					}
				}
			}
		} else if race.State == models.RaceStateNotStarted {
			text += "‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É*\n"
			text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ\n\n"
		}
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
	if len(registrations) > 0 {
		text += fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–£—á–∞—Å—Ç–Ω–∏–∫–∏ (%d):*\n", len(registrations))

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
		showLimit := 10
		showAll := len(registrations) <= showLimit

		for i, reg := range registrations {
			if !showAll && i >= showLimit {
				break
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫
			if race.State == models.RaceStateInProgress {
				var carConfirmed bool
				err = b.db.QueryRow(`
					SELECT car_confirmed FROM race_registrations 
					WHERE race_id = $1 AND driver_id = $2
				`, raceID, reg.DriverID).Scan(&carConfirmed)

				if err == nil && carConfirmed {
					text += fmt.Sprintf("‚Ä¢ %s ‚úÖ\n", reg.DriverName)
				} else {
					text += fmt.Sprintf("‚Ä¢ %s ‚è≥\n", reg.DriverName)
				}
			} else {
				text += fmt.Sprintf("‚Ä¢ %s\n", reg.DriverName)
			}
		}

		if !showAll {
			text += fmt.Sprintf("...–∏ –µ—â–µ %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n", len(registrations)-showLimit)
		}

		text += "\n"
	} else {
		text += "üë®‚ÄçüèéÔ∏è *–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤*\n\n"
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	switch race.State {
	case models.RaceStateInProgress:
		// –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω
		var confirmedCount int
		for _, reg := range registrations {
			var carConfirmed bool
			err = b.db.QueryRow(`
				SELECT car_confirmed FROM race_registrations 
				WHERE race_id = $1 AND driver_id = $2
			`, raceID, reg.DriverID).Scan(&carConfirmed)

			if err == nil && carConfirmed {
				confirmedCount++
			}
		}

		text += fmt.Sprintf("‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –º–∞—à–∏–Ω:* %d –∏–∑ %d\n", confirmedCount, len(registrations))

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
		resultCount, _ := b.ResultRepo.GetResultCountByRaceID(raceID)
		text += fmt.Sprintf("üìä *–ü–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:* %d –∏–∑ %d\n", resultCount, len(registrations))

	case models.RaceStateNotStarted:
		// –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞
		timeDiff := race.Date.Sub(time.Now())
		if timeDiff > 0 {
			days := int(timeDiff.Hours() / 24)
			hours := int(timeDiff.Hours()) % 24

			if days > 0 {
				text += fmt.Sprintf("‚è±Ô∏è *–î–æ –Ω–∞—á–∞–ª–∞:* %d –¥–Ω–µ–π %d —á–∞—Å–æ–≤\n", days, hours)
			} else {
				text += fmt.Sprintf("‚è±Ô∏è *–î–æ –Ω–∞—á–∞–ª–∞:* %d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç\n", hours, int(timeDiff.Minutes())%60)
			}
		}
	case models.RaceStateCompleted:
		// –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
		results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(raceID)
		if err == nil && len(results) > 0 {
			text += "üèÜ *–¢–æ–ø-3 –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:*\n"

			count := len(results)
			if count > 3 {
				count = 3
			}

			for i := 0; i < count; i++ {
				text += fmt.Sprintf("%d. *%s* - %d –æ—á–∫–æ–≤\n", i+1, results[i].DriverName, results[i].TotalScore)
			}

			text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	switch race.State {
	case models.RaceStateInProgress:
		// –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫
		if driver != nil && isRegistered {
			// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("my_car:%d", raceID),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("add_result:%d", raceID),
				),
			))
		}

		// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))

	case models.RaceStateNotStarted:
		// –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫
		if driver != nil {
			if isRegistered {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
						fmt.Sprintf("unregister_race:%d", raceID),
					),
				))
			} else {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
						fmt.Sprintf("register_race:%d", raceID),
					),
				))
			}
		}

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üë®‚ÄçüèéÔ∏è –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("race_registrations:%d", raceID),
			),
		))

	case models.RaceStateCompleted:
		// –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("race_results:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))
	}

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	if b.IsAdmin(userID) {
		var adminButtons []tgbotapi.InlineKeyboardButton

		switch race.State {
		case models.RaceStateNotStarted:
			adminButtons = append(adminButtons,
				tgbotapi.NewInlineKeyboardButtonData(
					"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("start_race:%d", raceID),
				),
			)
		case models.RaceStateInProgress:
			adminButtons = append(adminButtons,
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("complete_race:%d", raceID),
				),
			)
		}

		// –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
		if len(adminButtons) > 0 {
			keyboard = append(keyboard, adminButtons)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
				fmt.Sprintf("admin_race_panel:%d", raceID),
			),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≥–æ–Ω–æ–∫
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–∞–º",
			"races",
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è showAdminRacePanel –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (b *Bot) showAdminRacePanel(chatID int64, raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get registered drivers with car confirmation status
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return
	}

	// Get results count
	resultsCount, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	// Format message with admin panel
	text := fmt.Sprintf("‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ–Ω–∫–∏: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n", strings.Join(race.Disciplines, ", "))
	text += fmt.Sprintf("üèÜ –°—Ç–∞—Ç—É—Å: %s\n\n", getStatusText(race.State))

	text += fmt.Sprintf("üë®‚ÄçüèéÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\n", len(registrations))
	text += fmt.Sprintf("üìä –ü–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n\n", resultsCount)

	// Add driver statuses
	text += "*–°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n"

	var (
		confirmedCount     int
		unconfirmedDrivers []int
	)

	for i, reg := range registrations {
		var statusText string

		if reg.CarConfirmed {
			statusText = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª"
			confirmedCount++
		} else {
			statusText = "‚è≥ –æ–∂–∏–¥–∞–µ—Ç"
			unconfirmedDrivers = append(unconfirmedDrivers, reg.DriverID)
		}

		if reg.RerollUsed {
			statusText += ", üé≤ —Ä–µ—Ä–æ–ª–ª"
		}

		text += fmt.Sprintf("%d. %s - %s\n", i+1, reg.DriverName, statusText)
	}

	// Create keyboard using AdminRacePanelKeyboard
	keyboard := AdminRacePanelKeyboard(raceID, race.State)

	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

func (b *Bot) callbackRerollCar(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	log.Printf("‚≠ê callbackRerollCar: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ä–æ–ª–ª–∞ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %d", userID)

	// –†–∞–∑–±–∏—Ä–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞: %s", query.Data)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≥–æ–Ω–∫–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	log.Printf("üìå callbackRerollCar: –ü–æ–ª—É—á–µ–Ω ID –≥–æ–Ω–∫–∏: %d", raceID)

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if driver == nil {
		log.Printf("‚ùå callbackRerollCar: –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	log.Printf("üìå callbackRerollCar: –ì–æ–Ω—â–∏–∫ –Ω–∞–π–¥–µ–Ω: ID=%d, Name=%s", driver.ID, driver.Name)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if race == nil {
		log.Printf("‚ùå callbackRerollCar: –ì–æ–Ω–∫–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", raceID)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≥–æ–Ω–∫—É.")
		return
	}

	log.Printf("üìå callbackRerollCar: –ì–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ID=%d, Name=%s, State=%s", race.ID, race.Name, race.State)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≥–æ–Ω—â–∏–∫ –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É
	registered, err := b.RaceRepo.CheckDriverRegistered(raceID, driver.ID)
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	if !registered {
		log.Printf("‚ùå callbackRerollCar: –ì–æ–Ω—â–∏–∫ %d –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≥–æ–Ω–∫—É %d", driver.ID, raceID)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ—Ä–æ–ª–ª
	rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(raceID, driver.ID)
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ä–µ—Ä–æ–ª–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
		rerollUsed = false
	}

	log.Printf("üìå callbackRerollCar: –°—Ç–∞—Ç—É—Å —Ä–µ—Ä–æ–ª–ª–∞ –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d –≤ –≥–æ–Ω–∫–µ %d: %v", driver.ID, raceID, rerollUsed)

	if rerollUsed {
		log.Printf("‚ùå callbackRerollCar: –ì–æ–Ω—â–∏–∫ %d —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ä–µ—Ä–æ–ª–ª –≤ –≥–æ–Ω–∫–µ %d", driver.ID, raceID)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π —Ä–µ—Ä–æ–ª–ª –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ä–µ—Ä–æ–ª–ª –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ. –ö–∞–∂–¥–æ–º—É –≥–æ–Ω—â–∏–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ—Ä–æ–ª–ª.")
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := b.db.Begin()
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ –º–∞—à–∏–Ω—ã", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	log.Printf("üìå callbackRerollCar: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞")

	// –†–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã
	carAssignment, err := b.CarRepo.RerollCarForDriver(tx, raceID, driver.ID, race.CarClass)
	if err != nil {
		tx.Rollback()
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ —Ä–µ—Ä–æ–ª–ª–∞ –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ –º–∞—à–∏–Ω—ã", true)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ –º–∞—à–∏–Ω—ã: %v", err))
		return
	}

	log.Printf("üìå callbackRerollCar: –ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: %s", carAssignment.Car.Name)

	// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–µ—Ä–æ–ª–ª –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
	_, err = tx.Exec(`
		UPDATE race_registrations
		SET reroll_used = TRUE
		WHERE race_id = $1 AND driver_id = $2
	`, raceID, driver.ID)

	if err != nil {
		tx.Rollback()
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ä–æ–ª–ª–µ", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ä–æ–ª–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	log.Printf("üìå callbackRerollCar: –§–ª–∞–≥ —Ä–µ—Ä–æ–ª–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d –≤ –≥–æ–Ω–∫–µ %d", driver.ID, raceID)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ —Ä–µ—Ä–æ–ª–ª–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º (–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
	err = b.ResultRepo.ApplyRerollPenaltyToResult(tx, raceID, driver.ID, 1)
	if err != nil {
		log.Printf("‚ö†Ô∏è callbackRerollCar: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–∞: %v (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)", err)
		// –ù–µ –¥–µ–ª–∞–µ–º rollback, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—â–µ –Ω–µ—Ç
	}

	// –û—Ç–º–µ—á–∞–µ–º –º–∞—à–∏–Ω—É –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é
	err = b.RaceRepo.UpdateCarConfirmation(raceID, driver.ID, true)
	if err != nil {
		tx.Rollback()
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		return
	}

	log.Printf("üìå callbackRerollCar: –ú–∞—à–∏–Ω–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è")

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		log.Printf("‚ùå callbackRerollCar: –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ—Ä–æ–ª–ª–∞", true)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ä–æ–ª–ª–∞.")
		return
	}

	log.Printf("‚úÖ callbackRerollCar: –£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d (ID: %d) –≤ –≥–æ–Ω–∫–µ %d",
		driver.ID, userID, raceID)

	b.answerCallbackQuery(query.ID, "‚úÖ –ú–∞—à–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ—Ä–æ–ª–ª–∞!", false)

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ
	car := carAssignment.Car
	text := fmt.Sprintf("üöó *–í–∞—à–∞ –Ω–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("*%s (%s)*\n", car.Name, car.Year)
	text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", carAssignment.AssignmentNumber)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n\n", car.ClassLetter, car.ClassNumber)
	text += "‚ö†Ô∏è *–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π —Ä–µ—Ä–æ–ª–ª –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ. -1 –±–∞–ª–ª –±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.*\n\n"
	text += "‚úÖ *–ú–∞—à–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ–Ω–∫–µ
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
				fmt.Sprintf("race_details:%d", raceID),
			),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ
	if car.ImageURL != "" {
		b.sendPhotoWithKeyboard(chatID, car.ImageURL, text, keyboard)
	} else {
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.deleteMessage(chatID, messageID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–∞—à–∏–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–µ—Ä–æ–ª–ª–∞
	b.checkAllCarsConfirmed(raceID)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ—Ä–æ–ª–ª–µ
	//b.notifyAdminsAboutReroll(raceID, driver.ID, car.Name)
}
