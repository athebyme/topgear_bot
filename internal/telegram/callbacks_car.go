package telegram

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// callbackCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω
func (b *Bot) callbackCars(query *tgbotapi.CallbackQuery) {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /cars
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClass(query *tgbotapi.CallbackQuery) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /carclass
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
		Text: fmt.Sprintf("/carclass %s", classLetter),
	}

	b.handleCarClass(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// callbackCarClassAll –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackCarClassAll(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	class := models.GetCarClassByLetter(classLetter)
	if class == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω
	text := fmt.Sprintf("üöó *–í—Å–µ –º–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s*\n\n", class.Name)
	text += fmt.Sprintf("–í—Å–µ–≥–æ –º–∞—à–∏–Ω: %d\n\n", len(cars))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	var carLines []string
	for i, car := range cars {
		line := fmt.Sprintf("%d. *%s (%d)* - %d CR\n", i+1, car.Name, car.Year, car.Price)
		carLines = append(carLines, line)
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	joinedText := text
	maxLength := 4000 // –ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

	for _, line := range carLines {
		if len(joinedText)+len(line) > maxLength {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
			b.sendMessage(chatID, joinedText)
			joinedText = ""
		}
		joinedText += line
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
	if joinedText != "" {
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–ª–∞—Å—Å–∞–º
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("random_car:%s", classLetter),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
					"cars",
				),
			),
		)

		b.sendMessageWithKeyboard(chatID, joinedText, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRandomCar –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ–π –º–∞—à–∏–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
func (b *Bot) callbackRandomCar(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	classLetter := parts[1]

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—à–∏–Ω—É
	car := cars[rand.Intn(len(cars))]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
	text := fmt.Sprintf("üöó *%s (%d)*\n\n", car.Name, car.Year)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n", car.ClassLetter, car.ClassNumber)
	text += fmt.Sprintf("üìç –ò—Å—Ç–æ—á–Ω–∏–∫: %s", car.Source)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üé≤ –ï—â–µ —Å–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("random_car:%s", classLetter),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å—É",
				fmt.Sprintf("car_class:%s", classLetter),
			),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	if car.ImageURL != "" {
		b.sendPhotoWithKeyboard(chatID, car.ImageURL, text, keyboard)
	} else {
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackUpdateCarsDB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –º–∞—à–∏–Ω
func (b *Bot) callbackUpdateCarsDB(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω", true)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	b.sendMessage(chatID, "üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
	time.Sleep(3 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ë–∞–∑–∞ –º–∞—à–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleCars(&message)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackRaceAssignCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackRaceAssignCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω", true)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	carClass := parts[2]

	// –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã
	err = b.assignRandomCarsForRace(raceID, carClass)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
	b.sendMessage(chatID, "‚úÖ –ú–∞—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// callbackViewRaceCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) callbackViewRaceCars(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", false)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", false)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
	b.showRaceCarAssignments(chatID, raceID, userID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	b.deleteMessage(chatID, query.Message.MessageID)
}

// showRaceCarAssignments –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) showRaceCarAssignments(chatID int64, raceID int, userID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω
	assignments, err := b.CarRepo.GetRaceCarAssignments(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –º–∞—à–∏–Ω.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
	text := fmt.Sprintf("üèÅ *–ú–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s (%s)\n\n", race.CarClass, models.GetCarClassName(race.CarClass))

	if len(assignments) == 0 {
		text += "‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏."
	} else {
		for _, assignment := range assignments {
			text += fmt.Sprintf("*%s*\n", assignment.DriverName)
			text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
			text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (%d)\n", assignment.Car.Name, assignment.Car.Year)
			text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", assignment.Car.Rarity)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
	if b.IsAdmin(userID) {
		// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –º–∞—à–∏–Ω
		var classButtons [][]tgbotapi.InlineKeyboardButton

		for _, class := range models.CarClasses {
			classButtons = append(classButtons, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("üé≤ –ù–∞–∑–Ω–∞—á–∏—Ç—å %s", class.Name),
					fmt.Sprintf("race_assign_cars:%d:%s", race.ID, class.Letter),
				),
			))
		}

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –≥—Ä—É–ø–ø—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
		for i := 0; i < len(classButtons); i += 2 {
			if i+1 < len(classButtons) {
				// –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
				row := append(classButtons[i], classButtons[i+1]...)
				keyboard = append(keyboard, row)
			} else {
				// –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω–æ
				keyboard = append(keyboard, classButtons[i])
			}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ–Ω–∫–µ
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_results:%d", race.ID),
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}
