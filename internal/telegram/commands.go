package telegram

import (
	"fmt"
	"log"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// registerCommandHandlers registers all command handlers
func (b *Bot) registerCommandHandlers() {
	b.CommandHandlers = map[string]CommandHandler{
		"start":       b.handleStart,
		"register":    b.handleRegister,
		"driver":      b.handleDriver,
		"seasons":     b.handleSeasons,
		"races":       b.handleRaces,
		"newrace":     b.handleNewRace,
		"results":     b.handleResults,
		"help":        b.handleHelp,
		"addresult":   b.handleAddResult,
		"cancel":      b.handleCancel,
		"joinrace":    b.handleJoinRace,
		"leaverage":   b.handleLeaveRace,
		"mycar":       b.handleMyCar,
		"stats":       b.handleStats,
		"leaderboard": b.handleLeaderboard,
		// –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
		"activerace":  b.handleActiveRace,  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ
		"racestatus":  b.handleRaceStatus,  // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
		"adminrace":   b.handleAdminRace,   // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–Ω–∫–æ–π
		"editresult":  b.handleEditResult,  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
		"racedetails": b.handleRaceDetails, // –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–æ–Ω–∫–∏
	}
}

func (b *Bot) handleLeaderboard(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// Show overall leaderboard by default
	b.showLeaderboard(chatID, 0) // 0 means "all seasons"
}

func (b *Bot) showLeaderboard(chatID int64, seasonID int) {
	// Get all drivers
	drivers, err := b.DriverRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	if len(drivers) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	// Get all seasons for the keyboard
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	// Prepare data structures
	type driverStats struct {
		ID           int
		Name         string
		TotalScore   int
		Races        int
		Wins         int
		SecondPlaces int
		ThirdPlaces  int
		BestRally    string
	}

	var stats []driverStats

	// For each driver, calculate statistics
	for _, driver := range drivers {
		// Get all results for this driver
		results, err := b.ResultRepo.GetByDriverID(driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω—â–∏–∫–∞ %d: %v", driver.ID, err)
			continue
		}

		// Skip if no results
		if len(results) == 0 {
			continue
		}

		// Initialize driver stats
		ds := driverStats{
			ID:   driver.ID,
			Name: driver.Name,
		}

		// Analyze results
		for _, result := range results {
			// Skip if filtering by season and this result is not from that season
			if seasonID > 0 {
				race, err := b.RaceRepo.GetByID(result.RaceID)
				if err != nil || race == nil || race.SeasonID != seasonID {
					continue
				}
			}

			// Accumulate stats
			ds.TotalScore += result.TotalScore
			ds.Races++

			// Count places in disciplines
			for _, place := range result.Results {
				switch place {
				case 1:
					ds.Wins++
				case 2:
					ds.SecondPlaces++
				case 3:
					ds.ThirdPlaces++
				}
			}

			// Check rally discipline if there is one
			race, err := b.RaceRepo.GetByID(result.RaceID)
			if err == nil && race != nil {
				for _, discipline := range race.Disciplines {
					// Check if this is a rally discipline and the driver participated
					if strings.Contains(strings.ToLower(discipline), "—Ä–∞–ª–ª–∏") {
						place, exists := result.Results[discipline]
						if exists && place > 0 {
							// In a real implementation, you would get the actual rally time
							rallyTime := "2:34.567" // Example time

							// If no best rally yet, or this one is better
							if ds.BestRally == "" || rallyTime < ds.BestRally {
								ds.BestRally = rallyTime
							}
						}
					}
				}
			}
		}

		// Add to stats array if driver has races after filtering
		if ds.Races > 0 {
			stats = append(stats, ds)
		}
	}

	// Sort by total score (descending)
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].TotalScore > stats[j].TotalScore
	})

	// Format the message
	var title string
	if seasonID == 0 {
		title = "üèÜ *–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤*"
	} else {
		// Get season name
		season, err := b.SeasonRepo.GetByID(seasonID)
		if err != nil || season == nil {
			title = "üèÜ *–†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤ (–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∑–æ–Ω)*"
		} else {
			title = fmt.Sprintf("üèÜ *–†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤ %s*", season.Name)
		}
	}

	text := title + "\n\n"

	if len(stats) == 0 {
		text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
	} else {
		// Add header row
		text += "# | –ì–æ–Ω—â–∏–∫ | –û—á–∫–∏ | –ì–æ–Ω–∫–∏ | ü•á | ü•à | ü•â\n"
		text += "---|--------|------|-------|---|---|---\n"

		// Add driver rows
		for i, s := range stats {
			text += fmt.Sprintf("%d | *%s* | %d | %d | %d | %d | %d\n",
				i+1, s.Name, s.TotalScore, s.Races, s.Wins, s.SecondPlaces, s.ThirdPlaces)
		}

		// Add rally records section if any
		var rallyRecords []string
		for _, s := range stats {
			if s.BestRally != "" {
				rallyRecords = append(rallyRecords, fmt.Sprintf("‚Ä¢ *%s*: %s", s.Name, s.BestRally))
			}
		}

		if len(rallyRecords) > 0 {
			text += "\n*–õ—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –†–∞–ª–ª–∏:*\n"
			text += strings.Join(rallyRecords, "\n")
		}
	}

	// Create keyboard for season selection
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// All-time button
	allTimeText := "üìä –í—Å–µ —Å–µ–∑–æ–Ω—ã"
	if seasonID == 0 {
		allTimeText = "‚úÖ " + allTimeText
	}

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			allTimeText,
			"leaderboard:0",
		),
	))

	// Season buttons
	for _, season := range seasons {
		seasonText := season.Name
		if season.ID == seasonID {
			seasonText = "‚úÖ " + seasonText
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				seasonText,
				fmt.Sprintf("leaderboard:%d", season.ID),
			),
		))
	}

	// Back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			"back_to_main",
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// Add callback handler for leaderboard
func (b *Bot) callbackLeaderboard(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID

	// Parse season ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	seasonID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ–∑–æ–Ω–∞", true)
		return
	}

	// Delete the original message
	b.deleteMessage(chatID, query.Message.MessageID)

	// Show leaderboard for selected season
	b.showLeaderboard(chatID, seasonID)
}

// handleStats shows overall driver statistics with filters
func (b *Bot) handleStats(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// Get all drivers
	drivers, err := b.DriverRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	if len(drivers) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	// Get all seasons
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	// Get active season
	activeSeason, err := b.SeasonRepo.GetActive()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// Default to active season or first season in list
	var defaultSeasonID int
	if activeSeason != nil {
		defaultSeasonID = activeSeason.ID
	} else if len(seasons) > 0 {
		defaultSeasonID = seasons[0].ID
	}

	// Show driver statistics for the default season
	b.showDriverStats(chatID, defaultSeasonID)
}

// showDriverStats displays driver statistics for a specific season
func (b *Bot) showDriverStats(chatID int64, seasonID int) {
	// Get season information
	season, err := b.SeasonRepo.GetByID(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.")
		return
	}

	if season == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// Get all seasons for the keyboard
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	// Get races for this season
	races, err := b.RaceRepo.GetBySeason(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// Get all completed races
	var completedRaces []*models.Race
	for _, race := range races {
		if race.State == models.RaceStateCompleted {
			completedRaces = append(completedRaces, race)
		}
	}

	// Get all drivers
	drivers, err := b.DriverRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	// Prepare driver stats map
	driverStats := make(map[int]map[int]int) // driverID -> raceID -> score
	driverTotalScores := make(map[int]int)   // driverID -> total score

	// Get rally records for each driver
	driverRallyRecords := make(map[int]map[int]string) // driverID -> raceID -> rally time

	// For each completed race, get results
	for _, race := range completedRaces {
		results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(race.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏ %d: %v", race.ID, err)
			continue
		}

		for _, result := range results {
			// Initialize driver's map if needed
			if _, exists := driverStats[result.DriverID]; !exists {
				driverStats[result.DriverID] = make(map[int]int)
			}

			// Store score for this race
			driverStats[result.DriverID][race.ID] = result.TotalScore

			// Add to total score
			driverTotalScores[result.DriverID] += result.TotalScore

			// Check for rally disciplines
			for discipline, place := range result.Results {
				if strings.Contains(strings.ToLower(discipline), "—Ä–∞–ª–ª–∏") && place > 0 {
					if _, exists := driverRallyRecords[result.DriverID]; !exists {
						driverRallyRecords[result.DriverID] = make(map[int]string)
					}

					// Store rally time (this is a placeholder - in a real implementation,
					// you would get the actual time from the results)
					driverRallyRecords[result.DriverID][race.ID] = "2:34.567" // Example time
				}
			}
		}
	}

	// Sort drivers by total score (descending)
	type driverScore struct {
		Driver *models.Driver
		Score  int
	}

	var rankedDrivers []driverScore
	for _, driver := range drivers {
		rankedDrivers = append(rankedDrivers, driverScore{
			Driver: driver,
			Score:  driverTotalScores[driver.ID],
		})
	}

	// Sort by score descending
	sort.Slice(rankedDrivers, func(i, j int) bool {
		return rankedDrivers[i].Score > rankedDrivers[j].Score
	})

	// Format the message
	text := fmt.Sprintf("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤ %s*\n\n", season.Name)

	if len(completedRaces) == 0 {
		text += "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ."
	} else {
		// Table header
		text += "üèéÔ∏è | "
		for _, race := range completedRaces {
			text += fmt.Sprintf("%s | ", race.Name[:3]) // First 3 chars of race name
		}
		text += "–í—Å–µ–≥–æ\n"
		text += strings.Repeat("-", 50) + "\n"

		// Driver rows
		for i, ds := range rankedDrivers {
			driver := ds.Driver
			text += fmt.Sprintf("%d. *%s* | ", i+1, driver.Name)

			// Scores for each race
			for _, race := range completedRaces {
				score, exists := driverStats[driver.ID][race.ID]
				if exists {
					text += fmt.Sprintf("%d | ", score)
				} else {
					text += "- | "
				}
			}

			// Total score
			text += fmt.Sprintf("*%d*\n", driverTotalScores[driver.ID])
		}

		// Best rally times
		text += "\n*–õ—É—á—à–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ –†–∞–ª–ª–∏:*\n"
		for _, ds := range rankedDrivers {
			driver := ds.Driver
			if records, exists := driverRallyRecords[driver.ID]; exists && len(records) > 0 {
				// Find best time
				var bestRaceID int
				var bestTime string
				for raceID, time := range records {
					if bestTime == "" || time < bestTime {
						bestTime = time
						bestRaceID = raceID
					}
				}

				// Find race name
				var raceName string
				for _, race := range races {
					if race.ID == bestRaceID {
						raceName = race.Name
						break
					}
				}

				text += fmt.Sprintf("‚Ä¢ *%s*: %s (%s)\n", driver.Name, bestTime, raceName)
			}
		}
	}

	// Build keyboard for season selection
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Seasons row
	var seasonsRow []tgbotapi.InlineKeyboardButton
	for _, s := range seasons {
		// Add visual indicator for selected season
		name := s.Name
		if s.ID == seasonID {
			name = "‚úÖ " + name
		}

		seasonsRow = append(seasonsRow, tgbotapi.NewInlineKeyboardButtonData(
			name,
			fmt.Sprintf("stats_season:%d", s.ID),
		))

		// Maximum 3 buttons per row
		if len(seasonsRow) == 3 {
			keyboard = append(keyboard, seasonsRow)
			seasonsRow = nil
		}
	}

	// Add remaining season buttons
	if len(seasonsRow) > 0 {
		keyboard = append(keyboard, seasonsRow)
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			"back_to_main",
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleStart provides main menu and starting point
func (b *Bot) handleStart(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Check if user is already registered
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
	}

	// Create keyboard with main commands
	keyboard := MainKeyboard()

	var messageText string
	if driver != nil {
		messageText = fmt.Sprintf("üèéÔ∏è *Top Gear Racing Club* üèéÔ∏è\n\n–ü—Ä–∏–≤–µ—Ç, %s! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", driver.Name)
	} else {
		messageText = "üèéÔ∏è *Top Gear Racing Club* üèéÔ∏è\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –≥–æ–Ω—â–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
	}

	b.sendMessageWithKeyboard(chatID, messageText, keyboard)
}

// handleDriver shows driver profile with enhanced statistics
func (b *Bot) handleDriver(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver data
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		// FIXED: Changed from "/start" to "/register"
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// Get basic driver stats
	stats, err := b.DriverRepo.GetStats(driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	// Get all race results for this driver to find rally time record
	results, err := b.ResultRepo.GetByDriverID(driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		// Continue anyway, this is not critical
	}

	// Find best rally time
	type rallyRecord struct {
		Time     string
		RaceName string
		SeasonID int
	}

	var bestRally *rallyRecord

	// Look through all results for rally disciplines
	for _, result := range results {
		// Get race to find disciplines and season
		race, err := b.RaceRepo.GetByID(result.RaceID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏ %d: %v", result.RaceID, err)
			continue
		}

		if race == nil {
			continue
		}

		// Look for rally discipline in this race
		for _, discipline := range race.Disciplines {
			if strings.Contains(strings.ToLower(discipline), "—Ä–∞–ª–ª–∏") {
				// Check if driver has a result for this discipline
				place, exists := result.Results[discipline]
				if exists && place > 0 {
					// In a real implementation, you would get the time from the result
					// This is a placeholder
					rallyTime := "2:34.567" // Example time

					// If this is the first or better record, save it
					if bestRally == nil || rallyTime < bestRally.Time {
						bestRally = &rallyRecord{
							Time:     rallyTime,
							RaceName: race.Name,
							SeasonID: race.SeasonID,
						}
					}
				}
			}
		}
	}

	// Get season name for the rally record
	var rallySeasonName string
	if bestRally != nil {
		season, err := b.SeasonRepo.GetByID(bestRally.SeasonID)
		if err == nil && season != nil {
			rallySeasonName = season.Name
		}
	}

	// Format driver profile
	text := fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ–Ω—â–∏–∫–∞*\n\n*%s*\n", driver.Name)

	if driver.Description != "" {
		text += fmt.Sprintf("üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n\n", driver.Description)
	}

	text += fmt.Sprintf("üèÜ *–í—Å–µ–≥–æ –æ—á–∫–æ–≤:* %d\n", stats.TotalScore)
	text += fmt.Sprintf("üèÅ *–ì–æ–Ω–æ–∫:* %d\n", stats.TotalRaces)

	// Add rally record if available
	if bestRally != nil {
		text += fmt.Sprintf("‚è±Ô∏è *–†–µ–∫–æ—Ä–¥ –≤ –†–∞–ª–ª–∏:* %s (%s, %s)\n", bestRally.Time, bestRally.RaceName, rallySeasonName)
	}

	text += "\n"

	if len(stats.RecentRaces) > 0 {
		text += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–Ω–∫–∏:*\n"
		for _, race := range stats.RecentRaces {
			text += fmt.Sprintf("‚Ä¢ %s: %d –æ—á–∫–æ–≤\n", race.RaceName, race.Score)
		}
	} else {
		text += "*–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫*"
	}

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	keyboard := DriverProfileKeyboard()

	if driver.PhotoURL != "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
		b.sendPhotoWithKeyboard(chatID, driver.PhotoURL, text, keyboard)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}
}

// handleSeasons –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /seasons
func (b *Bot) handleSeasons(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	if len(seasons) == 0 {
		b.sendMessage(chatID, "üèÅ –°–µ–∑–æ–Ω—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
		return
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
	text := "üèÜ *–°–µ–∑–æ–Ω—ã Top Gear Racing Club*\n\n"

	for _, season := range seasons {
		var status string
		if season.Active {
			status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π"
		} else {
			status = "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
		}

		dateRange := fmt.Sprintf("%s", b.formatDate(season.StartDate))
		if !season.EndDate.IsZero() {
			dateRange += fmt.Sprintf(" - %s", b.formatDate(season.EndDate))
		} else {
			dateRange += " - –Ω.–≤."
		}

		text += fmt.Sprintf("*%s* (%s)\n%s\n\n", season.Name, status, dateRange)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
	keyboard := SeasonsKeyboard(seasons, b.IsAdmin(userID))

	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleNewRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /newrace
func (b *Bot) handleNewRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥–æ–Ω–æ–∫")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
	activeSeason, err := b.SeasonRepo.GetActive()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	if activeSeason == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–∑–æ–Ω –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.StateManager.SetState(userID, "new_race_name", map[string]interface{}{
		"season_id": activeSeason.ID,
	})

	b.sendMessage(chatID, fmt.Sprintf("üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏ –¥–ª—è *%s*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏:", activeSeason.Name))
}

// handleResults –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /results
func (b *Bot) handleResults(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	text := "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"

	if len(seasons) == 0 {
		text += "\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
		b.sendMessage(chatID, text)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, season := range seasons {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				season.Name,
				fmt.Sprintf("season_results:%d", season.ID),
			),
		))
	}

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleHelp provides documentation for all commands
func (b *Bot) handleHelp(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	isAdmin := b.IsAdmin(message.From.ID)

	text := `üèéÔ∏è *Top Gear Racing Club –ë–æ—Ç* üèéÔ∏è

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞
/driver - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞
/seasons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∑–æ–Ω–æ–≤
/races - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
/results - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–æ–∫
/leaderboard - –†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–æ–≤
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–æ–Ω–æ–∫:*
/activerace - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ
/racestatus - –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏
/joinrace - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É
/leaverage - –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É
/mycar - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏
/addresult - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥–æ–Ω–∫–µ
/racedetails [ID] - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–Ω–∫–µ

*–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω:*
/cars - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –º–∞—à–∏–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –∏–≥—Ä–µ
/carclass [–∫–ª–∞—Å—Å] - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞`

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	if isAdmin {
		text += `

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/adminrace - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–æ–π
/editresult [ID] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/newrace - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏`
	}

	text += `

*–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–æ–Ω–∫–∞:*
1. –ì–æ–Ω—â–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É —á–µ—Ä–µ–∑ /joinrace
2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–Ω–∫—É, –∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤—ã–¥–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã
3. –ì–æ–Ω—â–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –º–∞—à–∏–Ω—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ä–æ–ª–ª (—à—Ç—Ä–∞—Ñ -1 –æ—á–∫–æ)
4. –ì–æ–Ω—â–∏–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç –∑–∞–µ–∑–¥—ã –≤ –∫–∞–∂–¥–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏ –≤–≤–æ–¥—è—Ç —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–Ω–∫—É –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

*–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤:*
ü•á 1 –º–µ—Å—Ç–æ - 3 –æ—á–∫–∞
ü•à 2 –º–µ—Å—Ç–æ - 2 –æ—á–∫–∞
ü•â 3 –º–µ—Å—Ç–æ - 1 –æ—á–∫–æ
‚ö†Ô∏è –†–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã - —à—Ç—Ä–∞—Ñ -1 –æ—á–∫–æ`

	// Create helpful keyboard for main commands
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ì–æ–Ω–∫–∏", "races"),
			tgbotapi.NewInlineKeyboardButtonData("üë®‚ÄçüèéÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "driver_command"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöó –ú–∞—à–∏–Ω—ã", "cars"),
			tgbotapi.NewInlineKeyboardButtonData("üèÜ –†–µ–π—Ç–∏–Ω–≥", "leaderboard"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –¢–µ–∫—É—â–∞—è –≥–æ–Ω–∫–∞", "activerace"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"),
		),
	)

	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel
func (b *Bot) handleCancel(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	if b.StateManager.HasState(userID) {
		b.StateManager.ClearState(userID)
		b.sendMessage(chatID, "üö´ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	} else {
		b.sendMessage(chatID, "ü§î –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
	}
}

func (b *Bot) callbackDriverCommand(query *tgbotapi.CallbackQuery) {
	message := tgbotapi.Message{
		From: query.From,
		Chat: query.Message.Chat,
	}

	b.handleDriver(&message)

	b.deleteMessage(query.Message.Chat.ID, query.Message.MessageID)
}

// handleStateInput routes input to appropriate handler based on state
func (b *Bot) handleStateInput(message *tgbotapi.Message, state models.UserState) {
	switch state.State {
	case "register_name":
		b.handleRegisterName(message, state)
	case "register_description":
		b.handleRegisterDescription(message, state)
	case "register_photo":
		b.handleRegisterPhoto(message, state)
	case "new_race_name":
		b.handleNewRaceName(message, state)
	case "new_race_date":
		b.handleNewRaceDate(message, state)
	case "new_race_car_class":
		b.handleNewRaceCarClass(message, state)
	case "edit_driver_name":
		b.handleEditDriverName(message, state)
	case "edit_driver_description":
		b.handleEditDriverDescription(message, state)
	case "edit_driver_photo":
		b.handleEditDriverPhoto(message, state)
	case "add_result_car_number":
		b.handleResultCarNumber(message, state)
	case "add_result_car_name":
		b.handleResultCarName(message, state)
	case "add_result_car_photo":
		b.handleResultCarPhoto(message, state)
	case "add_result_discipline":
		b.handleResultDiscipline(message, state)
	case "new_season_name":
		b.handleNewSeasonName(message, state)
	case "new_season_start_date":
		b.handleNewSeasonStartDate(message, state)
	default:
		b.sendMessage(message.Chat.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// handleRegisterDescription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (b *Bot) handleRegisterDescription(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	description := message.Text
	if description == "-" {
		description = ""
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "register_photo", map[string]interface{}{
		"name":        state.ContextData["name"],
		"description": description,
	})

	b.sendMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

// handleRegisterPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (b *Bot) handleRegisterPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	var photoURL string

	if message.Text == "-" {
		photoURL = ""
	} else if message.Photo != nil && len(message.Photo) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		photo := message.Photo[len(message.Photo)-1]
		photoURL = photo.FileID
	} else {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞
	driver := &models.Driver{
		TelegramID:  userID,
		Name:        state.ContextData["name"].(string),
		Description: state.ContextData["description"].(string),
		PhotoURL:    photoURL,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	_, err := b.DriverRepo.Create(driver)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /driver —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞.")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	b.handleStart(message)
}

// handleNewRaceName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏
func (b *Bot) handleNewRaceName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	name := strings.TrimSpace(message.Text)
	if len(name) < 3 || len(name) > 50 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
	b.StateManager.SetState(userID, "new_race_date", map[string]interface{}{
		"season_id": state.ContextData["season_id"],
		"name":      name,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
}

// handleNewRaceDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –≥–æ–Ω–∫–∏
func (b *Bot) handleNewRaceDate(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	dateStr := message.Text
	date, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
	b.StateManager.SetState(userID, "new_race_car_class", map[string]interface{}{
		"season_id": state.ContextData["season_id"],
		"name":      state.ContextData["name"],
		"date":      date.Format("2006-01-02"),
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–æ–Ω–∫–∏:")
}

// handleNewRaceCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
func (b *Bot) handleNewRaceCarClass(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	carClass := strings.TrimSpace(message.Text)
	if len(carClass) < 1 || len(carClass) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.StateManager.SetState(userID, "new_race_disciplines", map[string]interface{}{
		"season_id":   state.ContextData["season_id"],
		"name":        state.ContextData["name"],
		"date":        state.ContextData["date"],
		"car_class":   carClass,
		"disciplines": []string{}, // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	})

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	keyboard := DisciplinesKeyboard([]string{})

	b.sendMessageWithKeyboard(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", keyboard)
}

// handleEditDriverName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
	name := strings.TrimSpace(message.Text)
	if len(name) < 2 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
	err = b.DriverRepo.UpdateName(driver.ID, name)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleEditDriverDescription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverDescription(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	description := message.Text

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î
	err = b.DriverRepo.UpdateDescription(driver.ID, description)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleEditDriverPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
	if message.Photo == nil || len(message.Photo) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
	photo := message.Photo[len(message.Photo)-1]
	photoURL := photo.FileID

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –ë–î
	err = b.DriverRepo.UpdatePhoto(driver.ID, photoURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleAddResultCarName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã
func (b *Bot) handleAddResultCarName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	carName := strings.TrimSpace(message.Text)
	if len(carName) < 2 || len(carName) > 50 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "add_result_car_photo", map[string]interface{}{
		"race_id":    state.ContextData["race_id"],
		"car_number": state.ContextData["car_number"],
		"car_name":   carName,
	})

	b.sendMessage(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

// handleAddResultCarPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã
func (b *Bot) handleAddResultCarPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	var photoURL string

	if message.Text == "-" {
		photoURL = ""
	} else if message.Photo != nil && len(message.Photo) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		photo := message.Photo[len(message.Photo)-1]
		photoURL = photo.FileID
	} else {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	raceID := state.ContextData["race_id"].(int)
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		b.StateManager.ClearState(userID)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
		"race_id":     raceID,
		"car_number":  state.ContextData["car_number"],
		"car_name":    state.ContextData["car_name"],
		"car_photo":   photoURL,
		"disciplines": race.Disciplines,
		"current_idx": 0,
		"results":     make(map[string]int),
	})

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.sendMessage(
		chatID,
		fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s' (1-3 –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏):",
			race.Disciplines[0]),
	)
}

// handleAddResultDiscipline –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
func (b *Bot) handleAddResultDiscipline(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
	place, err := strconv.Atoi(message.Text)
	if err != nil || place < 0 || place > 3 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3 (0 - –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, 1-3 - –º–µ—Å—Ç–æ).")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	disciplines := state.ContextData["disciplines"].([]string)
	currentIdx := state.ContextData["current_idx"].(int)
	results := state.ContextData["results"].(map[string]int)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	currentDiscipline := disciplines[currentIdx]
	results[currentDiscipline] = place

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
	currentIdx++

	if currentIdx < len(disciplines) {
		// –ï—â–µ –µ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
			"race_id":     state.ContextData["race_id"],
			"car_number":  state.ContextData["car_number"],
			"car_name":    state.ContextData["car_name"],
			"car_photo":   state.ContextData["car_photo"],
			"disciplines": disciplines,
			"current_idx": currentIdx,
			"results":     results,
		})

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		b.sendMessage(
			chatID,
			fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s' (1-3 –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏):",
				disciplines[currentIdx]),
		)
	} else {
		// –í—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω—â–∏–∫–∞
		driver, err := b.DriverRepo.GetByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
			return
		}

		if driver == nil {
			b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			b.StateManager.ClearState(userID)
			return
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
		totalScore := 0
		for _, place := range results {
			switch place {
			case 1:
				totalScore += 3
			case 2:
				totalScore += 2
			case 3:
				totalScore += 1
			}
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏
		result := &models.RaceResult{
			RaceID:      state.ContextData["race_id"].(int),
			DriverID:    driver.ID,
			CarNumber:   state.ContextData["car_number"].(int),
			CarName:     state.ContextData["car_name"].(string),
			CarPhotoURL: state.ContextData["car_photo"].(string),
			Results:     results,
			TotalScore:  totalScore,
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
		_, err = b.ResultRepo.Create(result)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
			return
		}

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		b.StateManager.ClearState(userID)

		b.sendMessage(
			chatID,
			fmt.Sprintf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –Ω–∞–±—Ä–∞–ª–∏ %d –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.", totalScore),
		)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏
		b.showRaceResults(chatID, result.RaceID)
	}
}

// handleNewSeasonName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞
func (b *Bot) handleNewSeasonName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	name := strings.TrimSpace(message.Text)
	if len(name) < 3 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
	b.StateManager.SetState(userID, "new_season_start_date", map[string]interface{}{
		"name": name,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
}

// handleNewSeasonStartDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞
func (b *Bot) handleNewSeasonStartDate(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	dateStr := message.Text
	startDate, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
	season := &models.Season{
		Name:      state.ContextData["name"].(string),
		StartDate: startDate,
		Active:    true, // –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–µ–Ω
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω –≤ –ë–î
	_, err = b.SeasonRepo.Create(season)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤
	b.handleSeasons(message)
}

// Updated handleRegisterName to properly handle driver registration
func (b *Bot) handleRegisterName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	log.Printf("Processing driver name for user ID: %d", userID)

	// Check name validity
	name := strings.TrimSpace(message.Text)
	log.Printf("Provided name: '%s', length: %d", name, len(name))

	if len(name) < 2 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
		return
	}

	// Save name in context and request description
	log.Printf("Setting state to register_description with name: %s", name)
	b.StateManager.SetState(userID, "register_description", map[string]interface{}{
		"name": name,
	})

	b.sendMessage(chatID, fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ, %s! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∫–∞–∫ –æ –≥–æ–Ω—â–∏–∫–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", name))
}

// handleActiveRace –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ
func (b *Bot) handleActiveRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É
	activeRace, err := b.RaceRepo.GetActiveRace()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ.")
		return
	}

	if activeRace == nil {
		b.sendMessage(chatID, "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É
	registered, err := b.RaceRepo.CheckDriverRegistered(activeRace.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –≥–æ–Ω—â–∏–∫–∞ (–µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
	var carInfo string
	if registered {
		assignment, err := b.CarRepo.GetDriverCarAssignment(activeRace.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		} else if assignment != nil {
			car := assignment.Car
			carInfo = fmt.Sprintf("\n\n*–í–∞—à–∞ –º–∞—à–∏–Ω–∞:*\nüöó %s (%s)\nüî¢ –ù–æ–º–µ—Ä: %d",
				car.Name, car.Year, assignment.AssignmentNumber)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
			var confirmed bool
			err = b.db.QueryRow(
				"SELECT car_confirmed FROM race_registrations WHERE race_id = $1 AND driver_id = $2",
				activeRace.ID, driver.ID,
			).Scan(&confirmed)

			if err == nil {
				if confirmed {
					carInfo += "\n‚úÖ –ú–∞—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
				} else {
					carInfo += "\n‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycar —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
				}
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–µ
	text := fmt.Sprintf("üèÅ *–ê–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞: %s*\n\n", activeRace.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(activeRace.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", activeRace.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n", strings.Join(activeRace.Disciplines, ", "))
	text += fmt.Sprintf("üèÜ –°—Ç–∞—Ç—É—Å: %s\n", getStatusText(activeRace.State))

	if registered {
		text += "\n‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É" + carInfo
	} else {
		text += "\n‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç—É –≥–æ–Ω–∫—É"
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –≥–æ–Ω–∫–∏
	keyboard := ActiveRaceKeyboard(activeRace.ID, registered, activeRace.State, b.IsAdmin(userID))
	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// getStatusText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–Ω–∫–∏
func getStatusText(state string) string {
	switch state {
	case models.RaceStateNotStarted:
		return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
	case models.RaceStateInProgress:
		return "–ì–æ–Ω–∫–∞ –∏–¥–µ—Ç"
	case models.RaceStateCompleted:
		return "–ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

// ActiveRaceKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏
func ActiveRaceKeyboard(raceID int, registered bool, state string, isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	if state == models.RaceStateNotStarted {
		if registered {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
					fmt.Sprintf("unregister_race:%d", raceID),
				),
			))
		} else {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
					fmt.Sprintf("register_race:%d", raceID),
				),
			))
		}
	}

	if state == models.RaceStateInProgress && registered {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("my_car:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				fmt.Sprintf("add_result:%d", raceID),
			),
		))
	}

	// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üìä –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
			fmt.Sprintf("race_progress:%d", raceID),
		),
		tgbotapi.NewInlineKeyboardButtonData(
			"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
			fmt.Sprintf("view_race_cars:%d", raceID),
		),
	))

	// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
	if isAdmin {
		if state == models.RaceStateNotStarted {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("start_race:%d", raceID),
				),
			))
		} else if state == models.RaceStateInProgress {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("complete_race:%d", raceID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–æ–π",
				fmt.Sprintf("admin_race_panel:%d", raceID),
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// handleRaceStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ö–æ–¥ –≥–æ–Ω–∫–∏
func (b *Bot) handleRaceStatus(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É
	activeRace, err := b.RaceRepo.GetActiveRace()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ.")
		return
	}

	if activeRace == nil {
		b.sendMessage(chatID, "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–¥ –≥–æ–Ω–∫–∏
	b.showRaceProgress(chatID, activeRace.ID)
}

// handleAdminRace –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–Ω–∫–æ–π
func (b *Bot) handleAdminRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É
	activeRace, err := b.RaceRepo.GetActiveRace()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ.")
		return
	}

	if activeRace == nil {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
		upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
			return
		}

		if len(upcomingRaces) == 0 {
			b.sendMessage(chatID, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newrace —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É.")
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫
		text := "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ–Ω–æ–∫*\n\n–ê–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞:\n\n"

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω–∫–∏
		var keyboard [][]tgbotapi.InlineKeyboardButton

		for _, race := range upcomingRaces {
			text += fmt.Sprintf("‚Ä¢ *%s* (üìÖ %s)\n", race.Name, b.formatDate(race.Date))

			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å: %s", race.Name),
					fmt.Sprintf("start_race:%d", race.ID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É",
				"new_race",
			),
		))

		b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
		return
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
	b.showAdminRacePanel(chatID, activeRace.ID)
}

// showAdminRacePanel –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–æ–Ω–∫–∏
func (b *Bot) showAdminRacePanel(chatID int64, raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// Get registered drivers with car confirmation status
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
		return
	}

	// Get results count
	resultsCount, err := b.ResultRepo.GetResultCountByRaceID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	// Format message with admin panel
	text := fmt.Sprintf("‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ–Ω–∫–∏: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n", strings.Join(race.Disciplines, ", "))
	text += fmt.Sprintf("üèÜ –°—Ç–∞—Ç—É—Å: %s\n\n", getStatusText(race.State))

	text += fmt.Sprintf("üë®‚ÄçüèéÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\n", len(registrations))
	text += fmt.Sprintf("üìä –ü–æ–¥–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %d\n\n", resultsCount)

	// Add driver statuses
	text += "*–°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n"

	var (
		confirmedCount     int
		unconfirmedDrivers []int
	)

	for i, reg := range registrations {
		var statusText string

		if reg.CarConfirmed {
			statusText = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª"
			confirmedCount++
		} else {
			statusText = "‚è≥ –æ–∂–∏–¥–∞–µ—Ç"
			unconfirmedDrivers = append(unconfirmedDrivers, reg.DriverID)
		}

		if reg.RerollUsed {
			statusText += ", üé≤ —Ä–µ—Ä–æ–ª–ª"
		}

		text += fmt.Sprintf("%d. %s - %s\n", i+1, reg.DriverName, statusText)
	}

	// Create keyboard for race management
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Buttons based on race state
	switch race.State {
	case models.RaceStateNotStarted:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
				fmt.Sprintf("admin_send_notifications:%d:reminder", raceID),
			),
		))

	case models.RaceStateInProgress:
		// If there are any unconfirmed cars, show button to force confirmation
		if len(unconfirmedDrivers) > 0 {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("admin_confirm_all_cars:%d", raceID),
				),
			))

			// Add individual confirm buttons for each unconfirmed driver
			for _, driverID := range unconfirmedDrivers {
				// Get driver name
				var driverName string
				err := b.db.QueryRow("SELECT name FROM drivers WHERE id = $1", driverID).Scan(&driverName)
				if err != nil {
					continue
				}

				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						fmt.Sprintf("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—à–∏–Ω—É: %s", driverName),
						fmt.Sprintf("admin_force_confirm_car:%d:%d", raceID, driverID),
					),
				))
			}
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—à–∏–Ω",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("admin_edit_results_menu:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—à–∏–Ω–∞—Ö",
				fmt.Sprintf("admin_send_notifications:%d:cars", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		))

	case models.RaceStateCompleted:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("admin_send_notifications:%d:results", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
				fmt.Sprintf("race_results:%d", raceID),
			),
		))
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleEditResult –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω—â–∏–∫–æ–≤
func (b *Bot) handleEditResult(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≥–æ–Ω–∫–∏. –ü—Ä–∏–º–µ—Ä: /editresult 42")
		return
	}

	// –ü–∞—Ä—Å–∏–º ID –≥–æ–Ω–∫–∏
	raceID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏
	results, err := b.ResultRepo.GetRaceResultsWithDriverNames(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.")
		return
	}

	if len(results) == 0 {
		b.sendMessage(chatID, "‚ÑπÔ∏è –î–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏ –µ—â–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	text := fmt.Sprintf("‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏: %s*\n\n", race.Name)
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω—â–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n\n"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω—â–∏–∫–∞
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, result := range results {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s - %d –æ—á–∫–æ–≤", result.DriverName, result.TotalScore),
				fmt.Sprintf("admin_edit_result:%d", result.ID),
			),
		))
	}

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_results:%d", raceID),
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleRaceDetails –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
func (b *Bot) handleRaceDetails(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
	args := strings.Fields(message.Text)
	if len(args) < 2 {
		// –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É
		b.handleActiveRace(message)
		return
	}

	// –ü–∞—Ä—Å–∏–º ID –≥–æ–Ω–∫–∏
	raceID, err := strconv.Atoi(args[1])
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	b.showRaceDetails(chatID, raceID, userID)
}
