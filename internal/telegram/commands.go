package telegram

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// registerCommandHandlers registers all command handlers
func (b *Bot) registerCommandHandlers() {
	b.CommandHandlers = map[string]CommandHandler{
		"start":     b.handleStart,
		"register":  b.handleRegister,
		"driver":    b.handleDriver,
		"seasons":   b.handleSeasons,
		"races":     b.handleRaces,
		"newrace":   b.handleNewRace,
		"results":   b.handleResults,
		"help":      b.handleHelp,
		"addresult": b.handleAddResult,
		"cancel":    b.handleCancel,
		"joinrace":  b.handleJoinRace,
		"leaverage": b.handleLeaveRace,
		"mycar":     b.handleMyCar,
	}
}

// handleStart provides main menu and starting point
func (b *Bot) handleStart(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Check if user is already registered
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
	}

	// Create keyboard with main commands
	keyboard := MainKeyboard()

	var messageText string
	if driver != nil {
		messageText = fmt.Sprintf("üèéÔ∏è *Top Gear Racing Club* üèéÔ∏è\n\n–ü—Ä–∏–≤–µ—Ç, %s! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", driver.Name)
	} else {
		messageText = "üèéÔ∏è *Top Gear Racing Club* üèéÔ∏è\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –≥–æ–Ω—â–∏–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register."
	}

	b.sendMessageWithKeyboard(chatID, messageText, keyboard)
}

// handleDriver with corrected message
func (b *Bot) handleDriver(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver data
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		// FIXED: Changed from "/start" to "/register"
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–Ω—â–∏–∫–∞
	stats, err := b.DriverRepo.GetStats(driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	text := fmt.Sprintf("üë®‚ÄçüèéÔ∏è *–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ–Ω—â–∏–∫–∞*\n\n*%s*\n", driver.Name)

	if driver.Description != "" {
		text += fmt.Sprintf("üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n\n", driver.Description)
	}

	text += fmt.Sprintf("üèÜ *–í—Å–µ–≥–æ –æ—á–∫–æ–≤:* %d\n", stats.TotalScore)
	text += fmt.Sprintf("üèÅ *–ì–æ–Ω–æ–∫:* %d\n\n", stats.TotalRaces)

	if len(stats.RecentRaces) > 0 {
		text += "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–Ω–∫–∏:*\n"
		for _, race := range stats.RecentRaces {
			text += fmt.Sprintf("‚Ä¢ %s: %d –æ—á–∫–æ–≤\n", race.RaceName, race.Score)
		}
	} else {
		text += "*–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫*"
	}

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	keyboard := DriverProfileKeyboard()

	if driver.PhotoURL != "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
		b.sendPhotoWithKeyboard(chatID, driver.PhotoURL, text, keyboard)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
		b.sendMessageWithKeyboard(chatID, text, keyboard)
	}
}

// handleSeasons –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /seasons
func (b *Bot) handleSeasons(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	if len(seasons) == 0 {
		b.sendMessage(chatID, "üèÅ –°–µ–∑–æ–Ω—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
		return
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
	text := "üèÜ *–°–µ–∑–æ–Ω—ã Top Gear Racing Club*\n\n"

	for _, season := range seasons {
		var status string
		if season.Active {
			status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π"
		} else {
			status = "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω"
		}

		dateRange := fmt.Sprintf("%s", b.formatDate(season.StartDate))
		if !season.EndDate.IsZero() {
			dateRange += fmt.Sprintf(" - %s", b.formatDate(season.EndDate))
		} else {
			dateRange += " - –Ω.–≤."
		}

		text += fmt.Sprintf("*%s* (%s)\n%s\n\n", season.Name, status, dateRange)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
	keyboard := SeasonsKeyboard(seasons, b.IsAdmin(userID))

	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleNewRace –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /newrace
func (b *Bot) handleNewRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≥–æ–Ω–æ–∫")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
	activeSeason, err := b.SeasonRepo.GetActive()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	if activeSeason == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ–∑–æ–Ω –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.StateManager.SetState(userID, "new_race_name", map[string]interface{}{
		"season_id": activeSeason.ID,
	})

	b.sendMessage(chatID, fmt.Sprintf("üèÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏ –¥–ª—è *%s*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–Ω–∫–∏:", activeSeason.Name))
}

// handleResults –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /results
func (b *Bot) handleResults(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∑–æ–Ω—ã
	seasons, err := b.SeasonRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ–∑–æ–Ω–æ–≤.")
		return
	}

	text := "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–æ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"

	if len(seasons) == 0 {
		text += "\n\n–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤."
		b.sendMessage(chatID, text)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ–∑–æ–Ω–∞–º–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, season := range seasons {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				season.Name,
				fmt.Sprintf("season_results:%d", season.ID),
			),
		))
	}

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleHelp provides documentation for all commands
func (b *Bot) handleHelp(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	text := `üèéÔ∏è *Top Gear Racing Club –ë–æ—Ç* üèéÔ∏è

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞
/driver - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞
/seasons - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ–∑–æ–Ω–æ–≤
/races - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
/results - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–∞—Ö:*
/joinrace - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É
/leaverage - –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É
/mycar - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏
/addresult - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–µ

*–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤:*
ü•á 1 –º–µ—Å—Ç–æ - 3 –æ—á–∫–∞
ü•à 2 –º–µ—Å—Ç–æ - 2 –æ—á–∫–∞
ü•â 3 –º–µ—Å—Ç–æ - 1 –æ—á–∫–æ
‚ö†Ô∏è –†–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã - —à—Ç—Ä–∞—Ñ -1 –æ—á–∫–æ

*–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:*
‚Ä¢ –í–∏–∑—É–∞–ª
‚Ä¢ –î—Ä–∞–≥
‚Ä¢ –ö—Ä—É–≥–æ–≤–∞—è –≥–æ–Ω–∫–∞ (3 –∫—Ä—É–≥–∞)
‚Ä¢ –û—Ñ—Ä–æ–∞–¥
‚Ä¢ –ì–æ–Ω–∫–∞ –æ—Ç –ê –∫ –ë
‚Ä¢ –†–∞–ª–ª–∏ (–Ω–∞ –≤—Ä–µ–º—è)

*–ü—Ä–æ—Ü–µ—Å—Å –≥–æ–Ω–∫–∏:*
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É —á–µ—Ä–µ–∑ /joinrace
2. –ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–∞—à–∏–Ω—ã
3. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –º–∞—à–∏–Ω—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ä–æ–ª–ª (—Å–æ —à—Ç—Ä–∞—Ñ–æ–º -1 –æ—á–∫–æ)
4. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –≤–≤–æ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º`

	b.sendMessage(chatID, text)
}

// handleCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel
func (b *Bot) handleCancel(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	if b.StateManager.HasState(userID) {
		b.StateManager.ClearState(userID)
		b.sendMessage(chatID, "üö´ –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	} else {
		b.sendMessage(chatID, "ü§î –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
	}
}

// handleStateInput routes input to appropriate handler based on state
func (b *Bot) handleStateInput(message *tgbotapi.Message, state models.UserState) {
	switch state.State {
	case "register_name":
		b.handleRegisterName(message, state)
	case "register_description":
		b.handleRegisterDescription(message, state)
	case "register_photo":
		b.handleRegisterPhoto(message, state)
	case "new_race_name":
		b.handleNewRaceName(message, state)
	case "new_race_date":
		b.handleNewRaceDate(message, state)
	case "new_race_car_class":
		b.handleNewRaceCarClass(message, state)
	case "edit_driver_name":
		b.handleEditDriverName(message, state)
	case "edit_driver_description":
		b.handleEditDriverDescription(message, state)
	case "edit_driver_photo":
		b.handleEditDriverPhoto(message, state)
	case "add_result_car_number":
		b.handleResultCarNumber(message, state)
	case "add_result_car_name":
		b.handleResultCarName(message, state)
	case "add_result_car_photo":
		b.handleResultCarPhoto(message, state)
	case "add_result_discipline":
		b.handleResultDiscipline(message, state)
	case "new_season_name":
		b.handleNewSeasonName(message, state)
	case "new_season_start_date":
		b.handleNewSeasonStartDate(message, state)
	default:
		b.sendMessage(message.Chat.ID, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// handleRegisterDescription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (b *Bot) handleRegisterDescription(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	description := message.Text
	if description == "-" {
		description = ""
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "register_photo", map[string]interface{}{
		"name":        state.ContextData["name"],
		"description": description,
	})

	b.sendMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –≥–æ–Ω—â–∏–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

// handleRegisterPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (b *Bot) handleRegisterPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	var photoURL string

	if message.Text == "-" {
		photoURL = ""
	} else if message.Photo != nil && len(message.Photo) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		photo := message.Photo[len(message.Photo)-1]
		photoURL = photo.FileID
	} else {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞
	driver := &models.Driver{
		TelegramID:  userID,
		Name:        state.ContextData["name"].(string),
		Description: state.ContextData["description"].(string),
		PhotoURL:    photoURL,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	_, err := b.DriverRepo.Create(driver)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /driver —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞.")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	b.handleStart(message)
}

// handleNewRaceName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏
func (b *Bot) handleNewRaceName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	name := strings.TrimSpace(message.Text)
	if len(name) < 3 || len(name) > 50 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
	b.StateManager.SetState(userID, "new_race_date", map[string]interface{}{
		"season_id": state.ContextData["season_id"],
		"name":      name,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ–Ω–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
}

// handleNewRaceDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –≥–æ–Ω–∫–∏
func (b *Bot) handleNewRaceDate(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	dateStr := message.Text
	date, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
	b.StateManager.SetState(userID, "new_race_car_class", map[string]interface{}{
		"season_id": state.ContextData["season_id"],
		"name":      state.ContextData["name"],
		"date":      date.Format("2006-01-02"),
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–æ–Ω–∫–∏:")
}

// handleNewRaceCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
func (b *Bot) handleNewRaceCarClass(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	carClass := strings.TrimSpace(message.Text)
	if len(carClass) < 1 || len(carClass) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ö–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.StateManager.SetState(userID, "new_race_disciplines", map[string]interface{}{
		"season_id":   state.ContextData["season_id"],
		"name":        state.ContextData["name"],
		"date":        state.ContextData["date"],
		"car_class":   carClass,
		"disciplines": []string{}, // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	})

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	keyboard := DisciplinesKeyboard([]string{})

	b.sendMessageWithKeyboard(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", keyboard)
}

// handleEditDriverName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
	name := strings.TrimSpace(message.Text)
	if len(name) < 2 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
	err = b.DriverRepo.UpdateName(driver.ID, name)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleEditDriverDescription –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverDescription(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	description := message.Text

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î
	err = b.DriverRepo.UpdateDescription(driver.ID, description)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleEditDriverPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≥–æ–Ω—â–∏–∫–∞
func (b *Bot) handleEditDriverPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
	if message.Photo == nil || len(message.Photo) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
	photo := message.Photo[len(message.Photo)-1]
	photoURL := photo.FileID

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		b.StateManager.ClearState(userID)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –ë–î
	err = b.DriverRepo.UpdatePhoto(driver.ID, photoURL)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–æ–Ω—â–∏–∫–∞
	b.handleDriver(message)
}

// handleAddResultCarName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã
func (b *Bot) handleAddResultCarName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	carName := strings.TrimSpace(message.Text)
	if len(carName) < 2 || len(carName) > 50 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "add_result_car_photo", map[string]interface{}{
		"race_id":    state.ContextData["race_id"],
		"car_number": state.ContextData["car_number"],
		"car_name":   carName,
	})

	b.sendMessage(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

// handleAddResultCarPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã
func (b *Bot) handleAddResultCarPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	var photoURL string

	if message.Text == "-" {
		photoURL = ""
	} else if message.Photo != nil && len(message.Photo) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		photo := message.Photo[len(message.Photo)-1]
		photoURL = photo.FileID
	} else {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	raceID := state.ContextData["race_id"].(int)
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		b.StateManager.ClearState(userID)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
		"race_id":     raceID,
		"car_number":  state.ContextData["car_number"],
		"car_name":    state.ContextData["car_name"],
		"car_photo":   photoURL,
		"disciplines": race.Disciplines,
		"current_idx": 0,
		"results":     make(map[string]int),
	})

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.sendMessage(
		chatID,
		fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s' (1-3 –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏):",
			race.Disciplines[0]),
	)
}

// handleAddResultDiscipline –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
func (b *Bot) handleAddResultDiscipline(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
	place, err := strconv.Atoi(message.Text)
	if err != nil || place < 0 || place > 3 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3 (0 - –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, 1-3 - –º–µ—Å—Ç–æ).")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
	disciplines := state.ContextData["disciplines"].([]string)
	currentIdx := state.ContextData["current_idx"].(int)
	results := state.ContextData["results"].(map[string]int)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	currentDiscipline := disciplines[currentIdx]
	results[currentDiscipline] = place

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
	currentIdx++

	if currentIdx < len(disciplines) {
		// –ï—â–µ –µ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
			"race_id":     state.ContextData["race_id"],
			"car_number":  state.ContextData["car_number"],
			"car_name":    state.ContextData["car_name"],
			"car_photo":   state.ContextData["car_photo"],
			"disciplines": disciplines,
			"current_idx": currentIdx,
			"results":     results,
		})

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–µ–¥—É—é—â–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		b.sendMessage(
			chatID,
			fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s' (1-3 –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏):",
				disciplines[currentIdx]),
		)
	} else {
		// –í—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		// –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–Ω—â–∏–∫–∞
		driver, err := b.DriverRepo.GetByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
			return
		}

		if driver == nil {
			b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			b.StateManager.ClearState(userID)
			return
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
		totalScore := 0
		for _, place := range results {
			switch place {
			case 1:
				totalScore += 3
			case 2:
				totalScore += 2
			case 3:
				totalScore += 1
			}
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏
		result := &models.RaceResult{
			RaceID:      state.ContextData["race_id"].(int),
			DriverID:    driver.ID,
			CarNumber:   state.ContextData["car_number"].(int),
			CarName:     state.ContextData["car_name"].(string),
			CarPhotoURL: state.ContextData["car_photo"].(string),
			Results:     results,
			TotalScore:  totalScore,
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
		_, err = b.ResultRepo.Create(result)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
			return
		}

		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		b.StateManager.ClearState(userID)

		b.sendMessage(
			chatID,
			fmt.Sprintf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –Ω–∞–±—Ä–∞–ª–∏ %d –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.", totalScore),
		)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏
		b.showRaceResults(chatID, result.RaceID)
	}
}

// handleNewSeasonName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞
func (b *Bot) handleNewSeasonName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	name := strings.TrimSpace(message.Text)
	if len(name) < 3 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
	b.StateManager.SetState(userID, "new_season_start_date", map[string]interface{}{
		"name": name,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
}

// handleNewSeasonStartDate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞
func (b *Bot) handleNewSeasonStartDate(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
	dateStr := message.Text
	startDate, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.04.2025):")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
	season := &models.Season{
		Name:      state.ContextData["name"].(string),
		StartDate: startDate,
		Active:    true, // –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–µ–Ω
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∑–æ–Ω –≤ –ë–î
	_, err = b.SeasonRepo.Create(season)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.StateManager.ClearState(userID)

	b.sendMessage(chatID, "‚úÖ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤
	b.handleSeasons(message)
}

// handleLeaveRace with corrected message
func (b *Bot) handleLeaveRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		// FIXED: Changed from "/start" to "/register"
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// Get upcoming races
	upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	// Filter races where driver is registered
	var registeredRaces []*models.Race

	for _, race := range upcomingRaces {
		registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
			continue
		}

		if registered {
			registeredRaces = append(registeredRaces, race)
		}
	}

	if len(registeredRaces) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// Create keyboard with registered races
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range registeredRaces {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				race.Name,
				fmt.Sprintf("unregister_race:%d", race.ID),
			),
		))
	}

	b.sendMessageWithKeyboard(
		chatID,
		"üèÅ *–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)
}

// Updated handleRegisterName to properly handle driver registration
func (b *Bot) handleRegisterName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	log.Printf("Processing driver name for user ID: %d", userID)

	// Check name validity
	name := strings.TrimSpace(message.Text)
	log.Printf("Provided name: '%s', length: %d", name, len(name))

	if len(name) < 2 || len(name) > 30 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
		return
	}

	// Save name in context and request description
	log.Printf("Setting state to register_description with name: %s", name)
	b.StateManager.SetState(userID, "register_description", map[string]interface{}{
		"name": name,
	})

	b.sendMessage(chatID, fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ, %s! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ –∫–∞–∫ –æ –≥–æ–Ω—â–∏–∫–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", name))
}
