package telegram

import (
	"fmt"
	"log"
	"strings"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) registerCarCommandHandlers() {
	b.CommandHandlers["cars"] = b.handleCars
	b.CommandHandlers["carclass"] = b.handleCarClass
	b.CommandHandlers["joinrace"] = b.handleJoinRace
	b.CommandHandlers["leaverace"] = b.handleUnregisterFromRace
	b.CommandHandlers["unregister"] = b.handleUnregisterFromRace
	b.CommandHandlers["mycar"] = b.handleMyCar
	b.CommandHandlers["raceregister"] = b.handleRegisterForRace
}

// handleCars –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cars
func (b *Bot) handleCars(message *tgbotapi.Message) {
	chatID := message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—à–∏–Ω–∞–º
	classCounts, err := b.CarRepo.GetClassCounts()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω –ø–æ –∫–ª–∞—Å—Å–∞–º: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—à–∏–Ω–∞–º.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—à–∏–Ω—ã –≤ –±–∞–∑–µ
	if len(classCounts) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –ø—É—Å—Ç–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	text := "üöó *–ú–∞—à–∏–Ω—ã Forza Horizon 4*\n\n"
	text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Å—É
	for _, class := range models.CarClasses {
		count := classCounts[class.Letter]
		if count > 0 {
			text += fmt.Sprintf("*%s* - %d –º–∞—à–∏–Ω\n", class.Name, count)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, class := range models.CarClasses {
		count := classCounts[class.Letter]
		if count > 0 {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("%s (%d)", class.Name, count),
					fmt.Sprintf("car_class:%s", class.Letter),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –º–∞—à–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	if b.IsAdmin(message.From.ID) {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –º–∞—à–∏–Ω",
				"update_cars_db",
			),
		))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleCarClass –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /carclass
func (b *Bot) handleCarClass(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	args := strings.Split(message.Text, " ")

	if len(args) < 2 {
		b.sendMessage(chatID, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã. –ü—Ä–∏–º–µ—Ä: /carclass A")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
	classLetter := strings.ToUpper(args[1])

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
	class := models.GetCarClassByLetter(classLetter)
	if class == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: D, C, B, A, S1, S2, X")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
	cars, err := b.CarRepo.GetByClass(classLetter)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω –∫–ª–∞—Å—Å–∞ %s: %v", classLetter, err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.")
		return
	}

	if len(cars) == 0 {
		b.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", classLetter))
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞—à–∏–Ω
	text := fmt.Sprintf("üöó *–ú–∞—à–∏–Ω—ã –∫–ª–∞—Å—Å–∞ %s*\n\n", class.Name)
	text += fmt.Sprintf("–í—Å–µ–≥–æ –º–∞—à–∏–Ω: %d\n\n", len(cars))

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	maxCars := 20
	showingAll := len(cars) <= maxCars

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–∞—Ö
	for i, car := range cars {
		if i >= maxCars {
			break
		}

		text += fmt.Sprintf("%d. *%s (%d)* - %d CR\n", i+1, car.Name, car.Year, car.Price)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –º–∞—à–∏–Ω—ã
	if !showingAll {
		text += fmt.Sprintf("\n...–∏ –µ—â–µ %d –º–∞—à–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–∞—à–∏–Ω.", len(cars)-maxCars)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—à–∏–Ω
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–π –º–∞—à–∏–Ω—ã —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üé≤ –°–ª—É—á–∞–π–Ω–∞—è –º–∞—à–∏–Ω–∞",
			fmt.Sprintf("random_car:%s", classLetter),
		),
	))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –º–∞—à–∏–Ω –º–Ω–æ–≥–æ
	if !showingAll {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—à–∏–Ω—ã",
				fmt.Sprintf("car_class_all:%s", classLetter),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–ª–∞—Å—Å–æ–≤
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∞–º",
			"cars",
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// assignRandomCarsForRace –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω–∫–∏
func (b *Bot) assignRandomCarsForRace(raceID int, carClass string) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–Ω–∫–µ
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
	}

	if race == nil {
		return fmt.Errorf("–≥–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤
	drivers, err := b.DriverRepo.GetAll()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
	}

	if len(drivers) == 0 {
		return fmt.Errorf("–Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤")
	}

	// –°–æ–±–∏—Ä–∞–µ–º ID –≥–æ–Ω—â–∏–∫–æ–≤
	var driverIDs []int
	for _, driver := range drivers {
		driverIDs = append(driverIDs, driver.ID)
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := b.db.Begin()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏
	err = b.CarRepo.DeleteRaceCarAssignments(tx, raceID)
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: %v", err)
	}

	// –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∞—à–∏–Ω—ã
	_, err = b.CarRepo.AssignRandomCars(tx, raceID, driverIDs, carClass)
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—à–∏–Ω: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏
	race.CarClass = carClass
	err = b.RaceRepo.Update(tx, race)
	if err != nil {
		tx.Rollback()
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –º–∞—à–∏–Ω –¥–ª—è –≥–æ–Ω–∫–∏: %v", err)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	return nil
}

// handleRegisterForRace handles the /register command to register for an upcoming race
func (b *Bot) handleRegisterForRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
		return
	}

	// Get upcoming races
	upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	if len(upcomingRaces) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	// Create keyboard with upcoming races
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range upcomingRaces {
		registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
			continue
		}

		var buttonText string
		var callbackData string

		if registered {
			buttonText = fmt.Sprintf("‚úÖ %s", race.Name)
			callbackData = fmt.Sprintf("unregister_race:%d", race.ID)
		} else {
			buttonText = race.Name
			callbackData = fmt.Sprintf("register_race:%d", race.ID)
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
		))
	}

	b.sendMessageWithKeyboard(
		chatID,
		"üèÅ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)
}

// handleUnregisterFromRace handles the /unregister command to unregister from an upcoming race
func (b *Bot) handleUnregisterFromRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
		return
	}

	// Get upcoming races
	upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	// Filter races where driver is registered
	var registeredRaces []*models.Race

	for _, race := range upcomingRaces {
		registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
			continue
		}

		if registered {
			registeredRaces = append(registeredRaces, race)
		}
	}

	if len(registeredRaces) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// Create keyboard with registered races
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range registeredRaces {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				race.Name,
				fmt.Sprintf("unregister_race:%d", race.ID),
			),
		))
	}

	b.sendMessageWithKeyboard(
		chatID,
		"üèÅ *–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)
}

// notifyDriversAboutCarAssignments sends car assignments to all drivers in a race
func (b *Bot) notifyDriversAboutCarAssignments(raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		return
	}

	if race == nil {
		log.Println("–ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	// Get all registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		return
	}

	// Logging for debugging
	log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—à–∏–Ω–∞—Ö –¥–ª—è %d –≥–æ–Ω—â–∏–∫–æ–≤", len(registrations))

	for _, reg := range registrations {
		// Get driver's Telegram ID
		var telegramID int64
		err := b.db.QueryRow("SELECT telegram_id FROM drivers WHERE id = $1", reg.DriverID).Scan(&telegramID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
			continue
		}

		// Get car assignment
		assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, reg.DriverID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
			continue
		}

		if assignment == nil {
			log.Printf("–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d –≤ –≥–æ–Ω–∫–µ %d", reg.DriverID, raceID)
			continue
		}

		// Format car information
		car := assignment.Car
		text := fmt.Sprintf("üèÅ *–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: %s*\n\n", race.Name)
		text += fmt.Sprintf("üöó *–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏:*\n\n")
		text += fmt.Sprintf("*%s (%s)*\n", car.Name, car.Year)
		text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
		text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
		text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
		text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
		text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
		text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
		text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
		text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
		text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
		text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n\n", car.ClassLetter, car.ClassNumber)
		text += "*–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã (–ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥—É—é), –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å -1 –±–∞–ª–ª –≤ –∏—Ç–æ–≥–æ–≤–æ–º –∑–∞—á–µ—Ç–µ –≥–æ–Ω–∫–∏.*"

		// Create keyboard for confirmation or reroll
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã",
					fmt.Sprintf("confirm_car:%d", raceID),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üé≤ –†–µ—Ä–æ–ª–ª (-1 –±–∞–ª–ª)",
					fmt.Sprintf("reroll_car:%d", raceID),
				),
			),
		)

		// Explicitly log before sending to debug issues
		log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—à–∏–Ω–µ –≥–æ–Ω—â–∏–∫—É %d (telegramID: %d)", reg.DriverID, telegramID)

		// Send message with keyboard and car image if available
		var sentMsg tgbotapi.Message
		if car.ImageURL != "" {
			sentMsg = b.sendPhotoWithKeyboard(telegramID, car.ImageURL, text, keyboard)
		} else {
			sentMsg = b.sendMessageWithKeyboard(telegramID, text, keyboard)
		}

		log.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–Ω—â–∏–∫—É %d, ID —Å–æ–æ–±—â–µ–Ω–∏—è: %d", reg.DriverID, sentMsg.MessageID)
	}
}

// notifyDriversAboutRaceCompletion sends race results to all participants
func (b *Bot) notifyDriversAboutRaceCompletion(raceID int) {
	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		return
	}

	if race == nil {
		log.Println("–ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	// Get race results
	results, err := b.ResultRepo.GetRaceResultsWithRerollPenalty(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏: %v", err)
		return
	}

	if len(results) == 0 {
		log.Println("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	// Format results message
	text := fmt.Sprintf("üèÅ *–ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s*\n\n", race.Name)
	text += "*–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n\n"

	for i, result := range results {
		text += fmt.Sprintf("%d. *%s* (%s)\n", i+1, result.DriverName, result.CarName)
		text += fmt.Sprintf("   üî¢ –ù–æ–º–µ—Ä: %d\n", result.CarNumber)

		// Add disciplin–µ results
		var placesText []string
		for _, discipline := range race.Disciplines {
			place := result.Results[discipline]
			emoji := getPlaceEmoji(place)
			placesText = append(placesText, fmt.Sprintf("%s %s: %s", emoji, discipline, getPlaceText(place)))
		}

		text += fmt.Sprintf("   üìä %s\n", strings.Join(placesText, " | "))

		// Add penalty if any
		if result.RerollPenalty > 0 {
			text += fmt.Sprintf("   ‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", result.RerollPenalty)
		}

		text += fmt.Sprintf("   üèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: %d\n\n", result.TotalScore)
	}

	// Get all registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		return
	}

	// Send results to all participants
	for _, reg := range registrations {
		// Get driver's Telegram ID
		var telegramID int64
		err := b.db.QueryRow("SELECT telegram_id FROM drivers WHERE id = $1", reg.DriverID).Scan(&telegramID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
			continue
		}

		// Send message
		b.sendMessage(telegramID, text)
	}
}

// getPlaceEmoji returns emoji for a place
func getPlaceEmoji(place int) string {
	switch place {
	case 1:
		return "ü•á"
	case 2:
		return "ü•à"
	case 3:
		return "ü•â"
	default:
		return "‚ûñ"
	}
}

// getPlaceText returns text for a place
func getPlaceText(place int) string {
	switch place {
	case 0:
		return "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"
	case 1:
		return "1 –º–µ—Å—Ç–æ"
	case 2:
		return "2 –º–µ—Å—Ç–æ"
	case 3:
		return "3 –º–µ—Å—Ç–æ"
	default:
		return "–Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª"
	}
}
