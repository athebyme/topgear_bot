package telegram

import (
	"fmt"
	"github.com/athebyme/forza-top-gear-bot/internal/repository"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleDriversList –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ–Ω—â–∏–∫–æ–≤
func (b *Bot) handleDriversList(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≥–æ–Ω—â–∏–∫–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	drivers, statsMap, err := b.DriverRepo.GetAllWithStats()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	if len(drivers) == 0 {
		b.sendMessage(chatID, "üë®‚ÄçüèéÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ–Ω—â–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	text := "üë®‚ÄçüèéÔ∏è *–ì–æ–Ω—â–∏–∫–∏ Top Gear Racing Club*\n\n"

	for _, driver := range drivers {
		stats := statsMap[driver.ID]
		text += fmt.Sprintf("*%s* - %d –æ—á–∫–æ–≤ (%d –≥–æ–Ω–æ–∫)\n", driver.Name, stats.TotalScore, stats.TotalRaces)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω—â–∏–∫–∞
	keyboard := DriversKeyboard(drivers)

	b.sendMessageWithKeyboard(chatID, text, keyboard)
}

// handleSeasonRaces –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
// handleSeasonRaces –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ–Ω–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
func (b *Bot) handleSeasonRaces(chatID int64, seasonID int, userID int64) {
	log.Printf("handleSeasonRaces: –∑–∞–ø—Ä–æ—Å –≥–æ–Ω–æ–∫ —Å–µ–∑–æ–Ω–∞ ID=%d", seasonID)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–µ
	season, err := b.SeasonRepo.GetByID(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.")
		return
	}

	if season == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞
	races, err := b.RaceRepo.GetBySeason(seasonID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫.")
		return
	}

	log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –≥–æ–Ω–æ–∫ –¥–ª—è —Å–µ–∑–æ–Ω–∞ ID=%d", len(races), seasonID)

	// –ü–æ–¥—Å—á–µ—Ç –≥–æ–Ω–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
	var activeCount, upcomingCount, completedCount int
	for _, race := range races {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nil –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		if race.State == "" {
			// –ï—Å–ª–∏ state –ø—É—Å—Ç–æ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ñ–ª–∞–≥—É Completed
			if race.Completed {
				completedCount++
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				race.State = models.RaceStateCompleted
			} else {
				upcomingCount++
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				race.State = models.RaceStateNotStarted
			}
			log.Printf("–ì–æ–Ω–∫–∞ ID=%d –Ω–µ –∏–º–µ–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ñ–ª–∞–≥—É Completed: %v",
				race.ID, race.State)
		} else {
			switch race.State {
			case models.RaceStateInProgress:
				activeCount++
			case models.RaceStateNotStarted:
				upcomingCount++
			case models.RaceStateCompleted:
				completedCount++
			default:
				log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏: %s –¥–ª—è ID=%d", race.State, race.ID)
				// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≥–æ–Ω–∫–∞
				upcomingCount++
				race.State = models.RaceStateNotStarted
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
	text := fmt.Sprintf("üèÅ *–ì–æ–Ω–∫–∏ %s*\n\n", season.Name)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–Ω–∫–∞–º
	text += fmt.Sprintf("*–°–≤–æ–¥–∫–∞:* %d –∞–∫—Ç–∏–≤–Ω—ã—Ö, %d –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö, %d –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n\n",
		activeCount, upcomingCount, completedCount)

	if len(races) == 0 {
		text += "–í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω–æ–∫."
	} else {
		text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω–∫–∏. –°–∏–º–≤–æ–ª—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å:\n"
		text += "üèéÔ∏è - –∞–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞\n"
		text += "‚è≥ - –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≥–æ–Ω–∫–∞\n"
		text += "‚úÖ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≥–æ–Ω–∫–∞\n"
		text += "–û—Ç–º–µ—Ç–∫–∞ ‚úÖ —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≥–æ–Ω–∫—É."
	}

	// –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	if len(races) > 0 {
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ–Ω–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
		var activeRaces, upcomingRaces, completedRaces []*models.Race
		for _, race := range races {
			switch race.State {
			case models.RaceStateInProgress:
				activeRaces = append(activeRaces, race)
			case models.RaceStateNotStarted:
				upcomingRaces = append(upcomingRaces, race)
			case models.RaceStateCompleted:
				completedRaces = append(completedRaces, race)
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–Ω–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
		if len(upcomingRaces) > 0 {
			for _, race := range upcomingRaces {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				var isRegistered bool
				if driver, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driver != nil {
					registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
					if err == nil {
						isRegistered = registered
					}
				}

				// –ò–º—è –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
				var buttonText string
				if isRegistered {
					buttonText = fmt.Sprintf("‚è≥ %s ‚úÖ", race.Name)
				} else {
					buttonText = fmt.Sprintf("‚è≥ %s", race.Name)
				}

				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						buttonText,
						fmt.Sprintf("race_details:%d", race.ID),
					),
				))
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–Ω–∫–∏
		if len(activeRaces) > 0 {
			for _, race := range activeRaces {
				var isRegistered bool
				if driver, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driver != nil {
					registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
					if err == nil {
						isRegistered = registered
					}
				}

				var buttonText string
				if isRegistered {
					buttonText = fmt.Sprintf("üèéÔ∏è %s ‚úÖ", race.Name)
				} else {
					buttonText = fmt.Sprintf("üèéÔ∏è %s", race.Name)
				}

				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						buttonText,
						fmt.Sprintf("race_details:%d", race.ID),
					),
				))
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
		if len(completedRaces) > 0 {
			for _, race := range completedRaces {
				keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						fmt.Sprintf("‚úÖ %s", race.Name),
						fmt.Sprintf("race_results:%d", race.ID),
					),
				))
			}
		}
	}

	// –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	if b.IsAdmin(userID) {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É",
				"new_race",
			),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ —Å–µ–∑–æ–Ω–∞–º",
			"seasons",
		),
	))

	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// startNewSeasonCreation –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
func (b *Bot) startNewSeasonCreation(chatID, userID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !b.IsAdmin(userID) {
		b.sendMessage(chatID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞")
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞
	b.StateManager.SetState(userID, "new_season_name", make(map[string]interface{}))

	b.sendMessage(chatID, "üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞:")
}

// startAddRaceResult –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–æ–Ω–∫–∏
func (b *Bot) startAddRaceResult(chatID, userID int64, raceID int) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–Ω—â–∏–∫–∞
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –≥–æ–Ω—â–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏
	exists, err := b.ResultRepo.CheckDriverResultExists(raceID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	if exists {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	b.StateManager.SetState(userID, "add_result_car_number", map[string]interface{}{
		"race_id": raceID,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:")
}

// getCarPlaceEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Ç–∞ –≤ –≥–æ–Ω–∫–µ
func getCarPlaceEmoji(place int) string {
	switch place {
	case 1:
		return "ü•á"
	case 2:
		return "ü•à"
	case 3:
		return "ü•â"
	default:
		return "‚ûñ"
	}
}

// parseDate –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
func parseDate(dateStr string) (time.Time, error) {
	return time.Parse("02.01.2006", dateStr)
}

// –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å handlers_car.go
func (b *Bot) handleResultCarNumber(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
	carNumber, err := strconv.Atoi(message.Text)
	if err != nil || carNumber < 1 || carNumber > 999 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999).")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã
	b.StateManager.SetState(userID, "add_result_car_name", map[string]interface{}{
		"race_id":    state.ContextData["race_id"],
		"car_number": carNumber,
	})

	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:")
}

// handleResultCarName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (b *Bot) handleResultCarName(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
	carName := strings.TrimSpace(message.Text)
	if len(carName) < 2 || len(carName) > 50 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	b.StateManager.SetState(userID, "add_result_car_photo", map[string]interface{}{
		"race_id":    state.ContextData["race_id"],
		"car_number": state.ContextData["car_number"],
		"car_name":   carName,
	})

	b.sendMessage(chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
}

// handleResultCarPhoto –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (b *Bot) handleResultCarPhoto(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	var photoURL string

	if message.Text == "-" {
		photoURL = ""
	} else if message.Photo != nil && len(message.Photo) > 0 {
		// –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		photo := message.Photo[len(message.Photo)-1]
		photoURL = photo.FileID
	} else {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	raceID := state.ContextData["race_id"].(int)
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏.")
		return
	}

	if race == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		b.StateManager.ClearState(userID)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
		"race_id":     raceID,
		"car_number":  state.ContextData["car_number"],
		"car_name":    state.ContextData["car_name"],
		"car_photo":   photoURL,
		"disciplines": race.Disciplines,
		"current_idx": 0,
		"results":     make(map[string]int),
	})

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
	disciplineName := race.Disciplines[0]
	keyboard := PlacesKeyboard(disciplineName)

	b.sendMessageWithKeyboard(
		chatID,
		fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s':", disciplineName),
		keyboard,
	)
}

// handleRaces –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫
func (b *Bot) handleRaces(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	log.Printf("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≥–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", userID)

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω
	activeSeason, err := b.SeasonRepo.GetActive()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞.")
		return
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ–∑–æ–Ω–µ
	if activeSeason != nil {
		log.Printf("–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω ID=%d, Name='%s'", activeSeason.ID, activeSeason.Name)
	} else {
		log.Printf("–ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	var races []*models.Race
	var seasonName string

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–Ω–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞
	log.Printf("–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–æ–Ω–∫–∏...")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º GetAll() –≤–º–µ—Å—Ç–æ —É—Å–ª–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
	races, err = b.RaceRepo.GetAll()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫.")
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
	if activeSeason != nil {
		seasonName = activeSeason.Name
	} else {
		seasonName = "–í—Å–µ —Å–µ–∑–æ–Ω—ã"
	}

	// –ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
	log.Printf("–ù–∞–π–¥–µ–Ω–æ %d –≥–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", len(races))
	for i, race := range races {
		log.Printf("–ì–æ–Ω–∫–∞ %d: ID=%d, –ù–∞–∑–≤–∞–Ω–∏–µ='%s', State='%s', SeasonID=%d, –î–∞—Ç–∞=%v",
			i+1, race.ID, race.Name, race.State, race.SeasonID, race.Date)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ–Ω–æ–∫
	if len(races) == 0 {
		log.Printf("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

		// –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–Ω–∫–∏
		if b.IsAdmin(userID) {
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É",
						"new_race",
					),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(
						"üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
						"back_to_main",
					),
				),
			)

			b.sendMessageWithKeyboard(
				chatID,
				"üèÅ *–°–ø–∏—Å–æ–∫ –≥–æ–Ω–æ–∫*\n\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–Ω–æ–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
				keyboard,
			)
		} else {
			b.sendMessageWithKeyboard(
				chatID,
				"üèÅ *–°–ø–∏—Å–æ–∫ –≥–æ–Ω–æ–∫*\n\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–Ω–æ–∫.",
				tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData(
							"üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
							"back_to_main",
						),
					),
				),
			)
		}
		return
	}

	// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–Ω–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
	var activeCount, upcomingCount, completedCount int
	for _, race := range races {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nil –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		if race.State == "" {
			// –ï—Å–ª–∏ state –ø—É—Å—Ç–æ–π, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ñ–ª–∞–≥—É Completed
			if race.Completed {
				completedCount++
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				race.State = models.RaceStateCompleted
			} else {
				upcomingCount++
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				race.State = models.RaceStateNotStarted
			}
			log.Printf("–ì–æ–Ω–∫–∞ ID=%d –Ω–µ –∏–º–µ–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ñ–ª–∞–≥—É Completed: %v",
				race.ID, race.State)
		} else {
			switch race.State {
			case models.RaceStateInProgress:
				activeCount++
			case models.RaceStateNotStarted:
				upcomingCount++
			case models.RaceStateCompleted:
				completedCount++
			default:
				log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏: %s –¥–ª—è ID=%d", race.State, race.ID)
				// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≥–æ–Ω–∫–∞
				upcomingCount++
				race.State = models.RaceStateNotStarted
			}
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := fmt.Sprintf("üèÅ *–ì–æ–Ω–∫–∏ %s*\n\n", seasonName)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–Ω–∫–∞–º
	text += fmt.Sprintf("*–°–≤–æ–¥–∫–∞:* %d –∞–∫—Ç–∏–≤–Ω—ã—Ö, %d –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö, %d –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö\n\n",
		activeCount, upcomingCount, completedCount)

	text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–Ω–∫–∏. –°–∏–º–≤–æ–ª—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å:\n"
	text += "üèéÔ∏è - –∞–∫—Ç–∏–≤–Ω–∞—è –≥–æ–Ω–∫–∞\n"
	text += "‚è≥ - –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≥–æ–Ω–∫–∞\n"
	text += "‚úÖ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≥–æ–Ω–∫–∞\n"
	text += "–û—Ç–º–µ—Ç–∫–∞ ‚úÖ —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≥–æ–Ω–∫—É."

	// –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ–Ω–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
	var activeRaces, upcomingRaces, completedRaces []*models.Race
	for _, race := range races {
		switch race.State {
		case models.RaceStateInProgress:
			activeRaces = append(activeRaces, race)
		case models.RaceStateNotStarted:
			upcomingRaces = append(upcomingRaces, race)
		case models.RaceStateCompleted:
			completedRaces = append(completedRaces, race)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–Ω–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
	if len(upcomingRaces) > 0 {
		for _, race := range upcomingRaces {
			var isRegistered bool
			if driver, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driver != nil {
				registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
				if err == nil {
					isRegistered = registered
				}
			}

			// –ò–º—è –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			var buttonText string
			if isRegistered {
				buttonText = fmt.Sprintf("‚è≥ %s ‚úÖ", race.Name)
			} else {
				buttonText = fmt.Sprintf("‚è≥ %s", race.Name)
			}

			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					buttonText,
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–Ω–∫–∏
	if len(activeRaces) > 0 {

		for _, race := range activeRaces {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			var isRegistered bool
			if driver, err := b.DriverRepo.GetByTelegramID(userID); err == nil && driver != nil {
				registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
				if err == nil {
					isRegistered = registered
				}
			}

			// –ò–º—è –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			var buttonText string
			if isRegistered {
				buttonText = fmt.Sprintf("üèéÔ∏è %s ‚úÖ", race.Name)
			} else {
				buttonText = fmt.Sprintf("üèéÔ∏è %s", race.Name)
			}

			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					buttonText,
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏
	if len(completedRaces) > 0 {
		for _, race := range completedRaces {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚úÖ %s", race.Name),
					fmt.Sprintf("race_results:%d", race.ID),
				),
			))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥–æ–Ω–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	if b.IsAdmin(userID) {

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É",
				"new_race",
			),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
			"back_to_main",
		),
	))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)

	sentMsg, err := b.API.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ–Ω–æ–∫.")
		return
	}

	log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: %d", sentMsg.MessageID)
}

// handleAddResult with corrected message
func (b *Bot) handleAddResult(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver data
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// Get active race instead of incomplete races
	activeRace, err := b.RaceRepo.GetActiveRace()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	if activeRace == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	// Check if driver is registered for this race
	registered, err := b.RaceRepo.CheckDriverRegistered(activeRace.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É.")
		return
	}

	if !registered {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// Check if driver has confirmed their car
	var carConfirmed bool
	err = b.db.QueryRow(`
		SELECT car_confirmed FROM race_registrations
		WHERE race_id = $1 AND driver_id = $2
	`, activeRace.ID, driver.ID).Scan(&carConfirmed)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã.")
		return
	}

	if !carConfirmed {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycar —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –º–∞—à–∏–Ω—É.")
		return
	}

	// Check if result already exists
	exists, err := b.ResultRepo.CheckDriverResultExists(activeRace.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
		return
	}

	if exists {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	// Get car assignment for this driver
	assignment, err := b.CarRepo.GetDriverCarAssignment(activeRace.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ.")
		return
	}

	if assignment == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	// Set state for adding result, pre-filling car info
	b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
		"race_id":     activeRace.ID,
		"car_number":  assignment.AssignmentNumber,
		"car_name":    assignment.Car.Name + " (" + assignment.Car.Year + ")",
		"car_photo":   assignment.Car.ImageURL,
		"disciplines": activeRace.Disciplines,
		"current_idx": 0,
		"results":     make(map[string]int),
	})

	// Ask for first discipline result
	disciplineName := activeRace.Disciplines[0]
	keyboard := PlacesKeyboard(disciplineName)

	b.sendMessageWithKeyboard(
		chatID,
		fmt.Sprintf("–í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s':",
			activeRace.Name, disciplineName),
		keyboard,
	)
}

// handleResultDiscipline with improved place selection
func (b *Bot) handleResultDiscipline(message *tgbotapi.Message, state models.UserState) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Check valid place
	place, err := strconv.Atoi(message.Text)
	if err != nil || place < 0 || place > 3 {
		b.sendMessage(chatID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3 (0 - –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, 1-3 - –º–µ—Å—Ç–æ).")
		return
	}

	// Get state data
	disciplines := state.ContextData["disciplines"].([]string)
	currentIdx := state.ContextData["current_idx"].(int)
	results := state.ContextData["results"].(map[string]int)

	// Save current discipline result
	currentDiscipline := disciplines[currentIdx]
	results[currentDiscipline] = place

	// Move to next discipline or finish
	currentIdx++

	if currentIdx < len(disciplines) {
		// More disciplines to go
		b.StateManager.SetState(userID, "add_result_discipline", map[string]interface{}{
			"race_id":     state.ContextData["race_id"],
			"car_number":  state.ContextData["car_number"],
			"car_name":    state.ContextData["car_name"],
			"car_photo":   state.ContextData["car_photo"],
			"disciplines": disciplines,
			"current_idx": currentIdx,
			"results":     results,
		})

		// Ask for next discipline
		disciplineName := disciplines[currentIdx]
		keyboard := PlacesKeyboard(disciplineName)

		b.sendMessageWithKeyboard(
			chatID,
			fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '%s':", disciplineName),
			keyboard,
		)
	} else {
		// All disciplines done, save result
		driver, err := b.DriverRepo.GetByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω—â–∏–∫–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
			return
		}

		if driver == nil {
			b.sendMessage(chatID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
			b.StateManager.ClearState(userID)
			return
		}

		// Calculate total score
		totalScore := 0
		for _, place := range results {
			switch place {
			case 1:
				totalScore += 3
			case 2:
				totalScore += 2
			case 3:
				totalScore += 1
			}
		}

		// Check if driver used reroll for this race
		rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(state.ContextData["race_id"].(int), driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
			rerollUsed = false // Assume not used if error
		}

		// Apply reroll penalty if used
		rerollPenalty := 0
		if rerollUsed {
			rerollPenalty = 1
			totalScore -= rerollPenalty
		}

		// Create race result
		result := &models.RaceResult{
			RaceID:        state.ContextData["race_id"].(int),
			DriverID:      driver.ID,
			CarNumber:     state.ContextData["car_number"].(int),
			CarName:       state.ContextData["car_name"].(string),
			CarPhotoURL:   state.ContextData["car_photo"].(string),
			Results:       results,
			TotalScore:    totalScore,
			RerollPenalty: rerollPenalty,
		}

		// Save result to DB
		var _ int
		if rerollPenalty > 0 {
			_, err = b.ResultRepo.CreateWithRerollPenalty(result)
		} else {
			_, err = b.ResultRepo.Create(result)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
			b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
			return
		}

		// Clear state
		b.StateManager.ClearState(userID)

		// Format success message with penalties
		successMsg := fmt.Sprintf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
		if rerollPenalty > 0 {
			successMsg += fmt.Sprintf("\n\n‚ö†Ô∏è –£—á—Ç–µ–Ω —à—Ç—Ä–∞—Ñ -%d –±–∞–ª–ª –∑–∞ —Ä–µ—Ä–æ–ª–ª –º–∞—à–∏–Ω—ã.", rerollPenalty)
		}
		successMsg += fmt.Sprintf("\n\n–í—ã –Ω–∞–±—Ä–∞–ª–∏ %d –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–π –≥–æ–Ω–∫–µ.", totalScore)
		b.sendMessage(chatID, successMsg)

		// Show race results
		b.showRaceResults(chatID, result.RaceID)
	}
}

func (b *Bot) handleRegister(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	log.Printf("Starting driver registration for user ID: %d", userID)

	exists, _ := b.DriverRepo.CheckExists(userID)

	log.Printf("Driver exists check result: %v", exists)

	if exists {
		b.sendMessage(chatID, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /driver –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏.")
		return
	}

	registrationContext := make(map[string]interface{})
	registrationContext["messageIDs"] = []int{}

	log.Printf("Setting user state to register_name")
	b.StateManager.SetState(userID, "register_name", registrationContext)

	msg := b.sendMessage(chatID, "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥–æ–Ω–æ—á–Ω–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):")

	b.addMessageIDToState(userID, msg.MessageID)

	b.deleteMessage(chatID, message.MessageID)
}

func (b *Bot) addMessageIDToState(userID int64, messageID int) {
	state, exists := b.StateManager.GetState(userID)
	if !exists {
		return
	}

	messageIDs, ok := state.ContextData["messageIDs"].([]int)
	if !ok {
		messageIDs = []int{}
	}

	messageIDs = append(messageIDs, messageID)
	b.StateManager.SetContextValue(userID, "messageIDs", messageIDs)
}

func (b *Bot) handleJoinRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	if len(upcomingRaces) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range upcomingRaces {
		registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
			continue
		}

		var buttonText string
		var callbackData string

		if registered {
			buttonText = fmt.Sprintf("‚úÖ %s", race.Name)
			callbackData = fmt.Sprintf("unregister_race:%d", race.ID)
		} else {
			buttonText = race.Name
			callbackData = fmt.Sprintf("register_race:%d", race.ID)
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
		))
	}

	b.sendMessageWithKeyboard(
		chatID,
		"üèÅ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –≥–æ–Ω–∫—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)
}

func (b *Bot) handleMyCar(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// Get driver information
	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// Get active race
	activeRace, err := b.RaceRepo.GetActiveRace()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–µ.")
		return
	}

	if activeRace == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	// Check if driver is registered for this race
	registered, err := b.RaceRepo.CheckDriverRegistered(activeRace.ID, driver.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		return
	}

	if !registered {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// Show car information
	showCarForRace(b, chatID, activeRace.ID, driver.ID)
}

func showCarForRace(b *Bot, chatID int64, raceID int, driverID int) {
	// Get car assignment
	assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driverID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ.")
		return
	}

	if assignment == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –ú–∞—à–∏–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –≥–æ–Ω–∫–∏.")
		return
	}

	// Get race info
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil || race == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–Ω–∫–∏: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ.")
		return
	}

	// Check if driver has confirmed their car
	var confirmed bool
	err = b.db.QueryRow(`
        SELECT car_confirmed FROM race_registrations
        WHERE race_id = $1 AND driver_id = $2
    `, raceID, driverID).Scan(&confirmed)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %v", err)
		confirmed = false // Default to false if error
	}

	// Check if reroll was already used
	rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(raceID, driverID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
		rerollUsed = false // Default to false if error
	}

	// Format car information
	car := assignment.Car
	text := fmt.Sprintf("üöó *–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –¥–ª—è –≥–æ–Ω–∫–∏ '%s'*\n\n", race.Name)
	text += fmt.Sprintf("*%s (%s)*\n", car.Name, car.Year)
	text += fmt.Sprintf("üî¢ –ù–æ–º–µ—Ä: %d\n", assignment.AssignmentNumber)
	text += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %d CR\n", car.Price)
	text += fmt.Sprintf("‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: %s\n\n", car.Rarity)
	text += "*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
	text += fmt.Sprintf("üèÅ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f/10\n", car.Speed)
	text += fmt.Sprintf("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %.1f/10\n", car.Handling)
	text += fmt.Sprintf("‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.1f/10\n", car.Acceleration)
	text += fmt.Sprintf("üö¶ –°—Ç–∞—Ä—Ç: %.1f/10\n", car.Launch)
	text += fmt.Sprintf("üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: %.1f/10\n\n", car.Braking)
	text += fmt.Sprintf("üèÜ –ö–ª–∞—Å—Å: %s %d\n", car.ClassLetter, car.ClassNumber)

	if assignment.IsReroll {
		text += "\n*–ú–∞—à–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ—Ä–æ–ª–ª–∞!*"
	}

	// Create keyboard for confirmation or reroll
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Only show confirmation/reroll buttons if not yet confirmed
	if !confirmed {
		// Add confirm button
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã",
				fmt.Sprintf("confirm_car:%d", raceID),
			),
		))

		// Add reroll button if not used yet
		if !rerollUsed {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üé≤ –†–µ—Ä–æ–ª–ª (-1 –±–∞–ª–ª)",
					fmt.Sprintf("reroll_car:%d", raceID),
				),
			))
		}
	} else {
		// If car is confirmed, show button to view race status
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –°—Ç–∞—Ç—É—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
		))

		// Add button to add results if the race is in progress
		if race.State == models.RaceStateInProgress {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("add_result:%d", raceID),
				),
			))
		}
	}

	// Add back button - –≤–∞–∂–Ω–æ! –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –≥–æ–Ω–∫–µ, –∞ –Ω–µ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	// Send message with keyboard and car image if available
	if car.ImageURL != "" {
		b.sendPhotoWithKeyboard(
			chatID,
			car.ImageURL,
			text,
			tgbotapi.NewInlineKeyboardMarkup(keyboard...),
		)
	} else {
		b.sendMessageWithKeyboard(
			chatID,
			text,
			tgbotapi.NewInlineKeyboardMarkup(keyboard...),
		)
	}
}

// handleLeaveRace with corrected message
func (b *Bot) handleLeaveRace(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	driver, err := b.DriverRepo.GetByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞.")
		return
	}

	if driver == nil {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ–Ω—â–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
		return
	}

	// Get upcoming races
	upcomingRaces, err := b.RaceRepo.GetUpcomingRaces()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫: %v", err)
		b.sendMessage(chatID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≥–æ–Ω–æ–∫.")
		return
	}

	// Filter races where driver is registered
	var registeredRaces []*models.Race

	for _, race := range upcomingRaces {
		registered, err := b.RaceRepo.CheckDriverRegistered(race.ID, driver.ID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
			continue
		}

		if registered {
			registeredRaces = append(registeredRaces, race)
		}
	}

	if len(registeredRaces) == 0 {
		b.sendMessage(chatID, "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –≥–æ–Ω–∫—É.")
		return
	}

	// Create keyboard with registered races
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range registeredRaces {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				race.Name,
				fmt.Sprintf("unregister_race:%d", race.ID),
			),
		))
	}

	b.sendMessageWithKeyboard(
		chatID,
		"üèÅ *–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≥–æ–Ω–∫—É*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–Ω–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
		tgbotapi.NewInlineKeyboardMarkup(keyboard...),
	)
}

func (b *Bot) callbackAdminConfirmAllCars(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get all registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", true)
		return
	}

	// Confirm all unconfirmed cars
	var confirmedCount int
	for _, reg := range registrations {
		if !reg.CarConfirmed {
			err = b.RaceRepo.UpdateCarConfirmation(raceID, reg.DriverID, true)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %d: %v", reg.DriverID, err)
				continue
			}
			confirmedCount++
		}
	}

	// Send confirmation message
	b.answerCallbackQuery(query.ID, fmt.Sprintf("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ %d –º–∞—à–∏–Ω", confirmedCount), false)
	b.sendMessage(chatID, fmt.Sprintf("‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –º–∞—à–∏–Ω—ã –¥–ª—è %d –≥–æ–Ω—â–∏–∫–æ–≤", confirmedCount))

	// Refresh admin panel
	b.showAdminRacePanel(chatID, raceID)

	// Delete the original message
	b.deleteMessage(chatID, query.Message.MessageID)
}

func (b *Bot) callbackAdminEditResultsMenu(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// Parse race ID from callback data
	parts := strings.Split(query.Data, ":")
	if len(parts) < 2 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	if race == nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", true)
		return
	}

	// Get all registered drivers
	registrations, err := b.RaceRepo.GetRegisteredDrivers(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", true)
		return
	}

	// Get race results
	results, err := b.ResultRepo.GetRaceResultsWithDriverNames(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", true)
		return
	}

	// Create a map of driver IDs to results
	resultsByDriverID := make(map[int]*repository.RaceResultWithDriver)
	for _, result := range results {
		resultsByDriverID[result.DriverID] = result
	}

	// Format message
	text := fmt.Sprintf("‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏: %s*\n\n", race.Name)
	text += fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", b.formatDate(race.Date))
	text += fmt.Sprintf("üöó –ö–ª–∞—Å—Å: %s\n", race.CarClass)
	text += fmt.Sprintf("üèéÔ∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã: %s\n\n", strings.Join(race.Disciplines, ", "))

	text += "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n\n"

	// Create keyboard
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add buttons for each driver - either to edit existing result or add new one
	for _, reg := range registrations {
		result, hasResult := resultsByDriverID[reg.DriverID]

		// Add driver info to text
		if hasResult {
			text += fmt.Sprintf("‚Ä¢ *%s* - %d –æ—á–∫–æ–≤ ‚úÖ\n", reg.DriverName, result.TotalScore)

			// Add button to edit result
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚úèÔ∏è %s", reg.DriverName),
					fmt.Sprintf("admin_edit_result:%d", result.ID),
				),
			))
		} else {
			text += fmt.Sprintf("‚Ä¢ *%s* - –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚ùå\n", reg.DriverName)

			// Add button to add result
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚ûï %s", reg.DriverName),
					fmt.Sprintf("admin_add_result:%d:%d", raceID, reg.DriverID),
				),
			))
		}
	}

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
			fmt.Sprintf("admin_race_panel:%d", raceID),
		),
	))

	// Send message with keyboard
	b.sendMessageWithKeyboard(chatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))

	// Delete the original message
	b.deleteMessage(chatID, messageID)
}

func (b *Bot) callbackAdminAddResult(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// Parse parameters from callback data (admin_add_result:raceID:driverID)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driverID, err := strconv.Atoi(parts[2])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// Get race information
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	// Get driver information
	var driverName string
	err = b.db.QueryRow("SELECT name FROM drivers WHERE id = $1", driverID).Scan(&driverName)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≥–æ–Ω—â–∏–∫–∞: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	// Get car assignment
	assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driverID)
	if err != nil || assignment == nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ì–æ–Ω—â–∏–∫—É –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –º–∞—à–∏–Ω–∞", true)
		return
	}

	// Set up state for adding result with pre-filled car info
	b.StateManager.SetState(userID, "admin_add_result_discipline", map[string]interface{}{
		"race_id":     raceID,
		"driver_id":   driverID,
		"driver_name": driverName,
		"car_number":  assignment.AssignmentNumber,
		"car_name":    assignment.Car.Name + " (" + assignment.Car.Year + ")",
		"car_photo":   assignment.Car.ImageURL,
		"disciplines": race.Disciplines,
		"current_idx": 0,
		"results":     make(map[string]int),
	})

	// Format message
	text := fmt.Sprintf("‚úèÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %s*\n\n", driverName)
	text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s (‚Ññ%d)\n\n", assignment.Car.Name, assignment.AssignmentNumber)

	// Check if driver used reroll
	var rerollUsed bool
	err = b.db.QueryRow(`
        SELECT reroll_used FROM race_registrations
        WHERE race_id = $1 AND driver_id = $2
    `, raceID, driverID).Scan(&rerollUsed)

	if err == nil && rerollUsed {
		text += "‚ö†Ô∏è *–ë—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ—Ä–æ–ª–ª* (-1 –±–∞–ª–ª –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)\n\n"
	}

	// First discipline
	disciplineName := race.Disciplines[0]
	text += fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '*%s*':", disciplineName)

	// Create place selection keyboard
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•á 1 –º–µ—Å—Ç–æ",
				fmt.Sprintf("admin_select_place:%d:%d:%s:1", raceID, driverID, disciplineName),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•à 2 –º–µ—Å—Ç–æ",
				fmt.Sprintf("admin_select_place:%d:%d:%s:2", raceID, driverID, disciplineName),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•â 3 –º–µ—Å—Ç–æ",
				fmt.Sprintf("admin_select_place:%d:%d:%s:3", raceID, driverID, disciplineName),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
				fmt.Sprintf("admin_select_place:%d:%d:%s:0", raceID, driverID, disciplineName),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –û—Ç–º–µ–Ω–∞",
				fmt.Sprintf("admin_edit_results_menu:%d", raceID),
			),
		),
	)

	// Send message with keyboard
	b.sendMessageWithKeyboard(chatID, text, keyboard)

	// Delete the original message
	b.deleteMessage(chatID, messageID)
}

func (b *Bot) callbackAdminSelectPlace(query *tgbotapi.CallbackQuery) {
	userID := query.From.ID
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// Check admin rights
	if !b.IsAdmin(userID) {
		b.answerCallbackQuery(query.ID, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", true)
		return
	}

	// Parse parameters from callback data (admin_select_place:raceID:driverID:discipline:place)
	parts := strings.Split(query.Data, ":")
	if len(parts) < 5 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", true)
		return
	}

	raceID, err := strconv.Atoi(parts[1])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω–∫–∏", true)
		return
	}

	driverID, err := strconv.Atoi(parts[2])
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–Ω—â–∏–∫–∞", true)
		return
	}

	disciplineName := parts[3]

	place, err := strconv.Atoi(parts[4])
	if err != nil || place < 0 || place > 3 {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞", true)
		return
	}

	// Get state
	state, exists := b.StateManager.GetState(userID)
	if !exists || state.State != "admin_add_result_discipline" {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", true)
		return
	}

	// Update results in state
	results := state.ContextData["results"].(map[string]int)
	results[disciplineName] = place

	// Get race disciplines
	race, err := b.RaceRepo.GetByID(raceID)
	if err != nil {
		b.answerCallbackQuery(query.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–Ω–∫–µ", true)
		return
	}

	// Get current discipline index
	var currentIdx int
	for i, d := range race.Disciplines {
		if d == disciplineName {
			currentIdx = i
			break
		}
	}

	// Move to next discipline or complete
	currentIdx++

	if currentIdx < len(race.Disciplines) {
		// Update state for next discipline
		b.StateManager.SetState(userID, "admin_add_result_discipline", map[string]interface{}{
			"race_id":     state.ContextData["race_id"],
			"driver_id":   state.ContextData["driver_id"],
			"driver_name": state.ContextData["driver_name"],
			"car_number":  state.ContextData["car_number"],
			"car_name":    state.ContextData["car_name"],
			"car_photo":   state.ContextData["car_photo"],
			"disciplines": race.Disciplines,
			"current_idx": currentIdx,
			"results":     results,
		})

		// Show next discipline selection
		nextDiscipline := race.Disciplines[currentIdx]

		// Update message with progress and next discipline
		text := fmt.Sprintf("‚úèÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %s*\n\n", state.ContextData["driver_name"])
		text += fmt.Sprintf("üöó –ú–∞—à–∏–Ω–∞: %s\n\n", state.ContextData["car_name"])

		// Show previous selections
		text += "*–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:*\n"
		for i := 0; i < currentIdx; i++ {
			disc := race.Disciplines[i]
			placeEmoji := getPlaceEmoji(results[disc])
			placeText := getPlaceText(results[disc])
			text += fmt.Sprintf("‚Ä¢ %s: %s %s\n", disc, placeEmoji, placeText)
		}

		text += fmt.Sprintf("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '*%s*':", nextDiscipline)

		// Create keyboard for next discipline
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"ü•á 1 –º–µ—Å—Ç–æ",
					fmt.Sprintf("admin_select_place:%d:%d:%s:1", raceID, driverID, nextDiscipline),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"ü•à 2 –º–µ—Å—Ç–æ",
					fmt.Sprintf("admin_select_place:%d:%d:%s:2", raceID, driverID, nextDiscipline),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"ü•â 3 –º–µ—Å—Ç–æ",
					fmt.Sprintf("admin_select_place:%d:%d:%s:3", raceID, driverID, nextDiscipline),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
					fmt.Sprintf("admin_select_place:%d:%d:%s:0", raceID, driverID, nextDiscipline),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –û—Ç–º–µ–Ω–∞",
					fmt.Sprintf("admin_edit_results_menu:%d", raceID),
				),
			),
		)

		// Update message
		b.editMessageWithKeyboard(chatID, messageID, text, keyboard)
	} else {
		// All disciplines completed, save result
		// Calculate total score
		totalScore := 0
		for _, place := range results {
			switch place {
			case 1:
				totalScore += 3
			case 2:
				totalScore += 2
			case 3:
				totalScore += 1
			}
		}

		// Check if driver used reroll
		rerollUsed, err := b.ResultRepo.GetDriverRerollStatus(raceID, driverID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ä–æ–ª–ª–∞: %v", err)
			rerollUsed = false // Default to false if error
		}

		// Apply reroll penalty
		rerollPenalty := 0
		if rerollUsed {
			rerollPenalty = 1
			totalScore -= rerollPenalty
		}

		// Get car assignment for photo
		assignment, err := b.CarRepo.GetDriverCarAssignment(raceID, driverID)
		if err != nil || assignment == nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: %v", err)

			// Clear state and show error
			b.StateManager.ClearState(userID)
			b.editMessage(chatID, messageID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ.")
			return
		}

		// Create race result
		result := &models.RaceResult{
			RaceID:        raceID,
			DriverID:      driverID,
			CarNumber:     state.ContextData["car_number"].(int),
			CarName:       state.ContextData["car_name"].(string),
			CarPhotoURL:   state.ContextData["car_photo"].(string),
			Results:       results,
			TotalScore:    totalScore,
			RerollPenalty: rerollPenalty,
		}

		// Save to database
		var resultID int
		if rerollPenalty > 0 {
			resultID, err = b.ResultRepo.CreateWithRerollPenalty(result)
		} else {
			resultID, err = b.ResultRepo.Create(result)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)

			// Clear state and show error
			b.StateManager.ClearState(userID)
			b.editMessage(chatID, messageID, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
			return
		}

		// Clear state
		b.StateManager.ClearState(userID)

		// Show success message
		text := fmt.Sprintf("‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≥–æ–Ω—â–∏–∫–∞ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n", state.ContextData["driver_name"])
		text += "*–ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Å—Ç–∞:*\n"

		for _, discipline := range race.Disciplines {
			placeEmoji := getPlaceEmoji(results[discipline])
			placeText := getPlaceText(results[discipline])
			text += fmt.Sprintf("‚Ä¢ %s: %s %s\n", discipline, placeEmoji, placeText)
		}

		if rerollPenalty > 0 {
			text += fmt.Sprintf("\n‚ö†Ô∏è –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Ä–æ–ª–ª: -%d\n", rerollPenalty)
		}

		text += fmt.Sprintf("\nüèÜ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: %d\n", totalScore)

		// Add buttons to edit result or go back to menu
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("admin_edit_result:%d", resultID),
				),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
					fmt.Sprintf("admin_edit_results_menu:%d", raceID),
				),
			),
		)

		// Update message
		b.editMessageWithKeyboard(chatID, messageID, text, keyboard)
	}
}
