package telegram

import (
	"fmt"
	"github.com/athebyme/forza-top-gear-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
)

// SeasonsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–∑–æ–Ω–æ–≤
func SeasonsKeyboard(seasons []*models.Season, isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, season := range seasons {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üèÅ –ì–æ–Ω–∫–∏ %s", season.Name),
				fmt.Sprintf("season_races:%d", season.ID),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
	if isAdmin {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω",
				"new_season",
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// DriversKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–æ–Ω—â–∏–∫–æ–≤
func DriversKeyboard(drivers []*models.Driver) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, driver := range drivers {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üë§ %s", driver.Name),
				fmt.Sprintf("driver_card:%d", driver.ID),
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// RaceResultsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏
func RaceResultsKeyboard(raceID int, completed bool, isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
	if !completed && isAdmin {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
			fmt.Sprintf("add_result:%d", raceID),
		),
	))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
			fmt.Sprintf("view_race_cars:%d", raceID),
		),
	))

	// –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏
	if isAdmin {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("edit_race:%d", raceID),
			),
		))

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–Ω–∫–∏
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("delete_race:%d", raceID),
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// DisciplinesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
func DisciplinesKeyboard(selectedDisciplines []string) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	selected := make(map[string]bool)
	for _, discipline := range selectedDisciplines {
		selected[discipline] = true
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
	for i, discipline := range models.DefaultDisciplines {
		var buttonText string
		if selected[discipline] {
			buttonText = "‚úÖ " + discipline
		} else {
			buttonText = discipline
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				buttonText,
				fmt.Sprintf("discipline:%d", i),
			),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"‚úÖ –ì–æ—Ç–æ–≤–æ",
			"disciplines_done",
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// IncompleteRacesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –≥–æ–Ω–∫–∏
func IncompleteRacesKeyboard(races []*models.Race) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, race := range races {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				race.Name,
				fmt.Sprintf("add_result:%d", race.ID),
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// PlacesKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
func PlacesKeyboard(discipline string) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•á 1 –º–µ—Å—Ç–æ",
				fmt.Sprintf("place:%s:1", discipline),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•à 2 –º–µ—Å—Ç–æ",
				fmt.Sprintf("place:%s:2", discipline),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"ü•â 3 –º–µ—Å—Ç–æ",
				fmt.Sprintf("place:%s:3", discipline),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª",
				fmt.Sprintf("place:%s:0", discipline),
			),
		),
	)
}

// ConfirmationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
func ConfirmationKeyboard(action string, id int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –î–∞",
				fmt.Sprintf("confirm_%s:%d", action, id),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –ù–µ—Ç",
				fmt.Sprintf("cancel_%s:%d", action, id),
			),
		),
	)
}

// NumberKeyboard —Å–æ–∑–¥–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞
func NumberKeyboard(prefix string, min, max int) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ü–∏—Ñ—Ä–∞–º–∏
	for i := min; i <= max; i++ {
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(
			strconv.Itoa(i),
			fmt.Sprintf("%s:%d", prefix, i),
		))

		// –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
		if len(row) == 5 || i == max {
			keyboard = append(keyboard, row)
			row = nil
		}
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// BackToMainKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func BackToMainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
				"back_to_main",
			),
		),
	)
}

// BackKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
func BackKeyboard(action string, id int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥",
				fmt.Sprintf("%s:%d", action, id),
			),
		),
	)
}

// CancelKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
func CancelKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –û—Ç–º–µ–Ω–∞",
				"cancel",
			),
		),
	)
}

// RaceStateKeyboard creates a keyboard for changing race state
func RaceStateKeyboard(raceID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ùå –û—Ç–º–µ–Ω–∞",
				"cancel",
			),
		),
	)
}

// Updated RacesKeyboard to use race_details callback
func RacesKeyboard(races []*models.Race, isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Group races by state
	var notStartedRaces []*models.Race
	var inProgressRaces []*models.Race
	var completedRaces []*models.Race

	for _, race := range races {
		switch race.State {
		case models.RaceStateNotStarted:
			notStartedRaces = append(notStartedRaces, race)
		case models.RaceStateInProgress:
			inProgressRaces = append(inProgressRaces, race)
		case models.RaceStateCompleted:
			completedRaces = append(completedRaces, race)
		}
	}

	// Add in-progress races first
	if len(inProgressRaces) > 0 {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèéÔ∏è –¢–µ–∫—É—â–∏–µ –≥–æ–Ω–∫–∏:", "no_action"),
		))

		for _, race := range inProgressRaces {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("üèéÔ∏è %s", race.Name),
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}
	}

	// Add upcoming races
	if len(notStartedRaces) > 0 {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è≥ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≥–æ–Ω–∫–∏:", "no_action"),
		))

		for _, race := range notStartedRaces {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚è≥ %s", race.Name),
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}
	}

	// Add completed races
	if len(completedRaces) > 0 {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–æ–Ω–∫–∏:", "no_action"),
		))

		for _, race := range completedRaces {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					fmt.Sprintf("‚úÖ %s", race.Name),
					fmt.Sprintf("race_details:%d", race.ID),
				),
			))
		}
	}

	// Add create race button for admins
	if isAdmin {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ–Ω–∫—É",
				"new_race",
			),
		))
	}

	// –ò–∑–º–µ–Ω–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º back_to_main –≤–º–µ—Å—Ç–æ seasons –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
			"back_to_main",
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// RaceRegistrationsKeyboard creates a keyboard for managing race registrations
func RaceRegistrationsKeyboard(raceID int, registrations []*models.RaceRegistration) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add buttons for each driver
	for _, reg := range registrations {
		var status string
		if reg.CarConfirmed {
			status = "‚úÖ"
		} else {
			status = "‚è≥"
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s %s", status, reg.DriverName),
				fmt.Sprintf("driver_registration:%d:%d", raceID, reg.DriverID),
			),
		))
	}

	// Add race management buttons
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
			fmt.Sprintf("start_race:%d", raceID),
		),
	))

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// RaceCarConfirmationKeyboard creates a keyboard for car confirmation options
func RaceCarConfirmationKeyboard(raceID int, rerollAvailable bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Add confirm button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –º–∞—à–∏–Ω—ã",
			fmt.Sprintf("confirm_car:%d", raceID),
		),
	))

	// Add reroll button if available
	if rerollAvailable {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üé≤ –†–µ—Ä–æ–ª–ª (-1 –±–∞–ª–ª)",
				fmt.Sprintf("reroll_car:%d", raceID),
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

func MainKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÅ –ì–æ–Ω–∫–∏", "races"),
			tgbotapi.NewInlineKeyboardButtonData("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "register_driver"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚ÄçüèéÔ∏è –ì–æ–Ω—â–∏–∫–∏", "drivers"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "results"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöó –ú–∞—à–∏–Ω—ã", "cars"),
			tgbotapi.NewInlineKeyboardButtonData("üèÜ –°–µ–∑–æ–Ω—ã", "seasons"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üèÜ –†–µ–π—Ç–∏–Ω–≥", "leaderboard"),
		),
	)
}

// DriverRaceOptionsKeyboard creates a keyboard for driver options in a race
func DriverRaceOptionsKeyboard(raceID int, registered bool, state string) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// Options depend on race state and registration status
	if state == models.RaceStateNotStarted {
		if registered {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
					fmt.Sprintf("unregister_race:%d", raceID),
				),
			))
		} else {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
					fmt.Sprintf("register_race:%d", raceID),
				),
			))
		}
	} else if state == models.RaceStateInProgress && registered {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("my_car:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				fmt.Sprintf("add_result:%d", raceID),
			),
		))
	}

	// Common buttons for all states
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üöó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—à–∏–Ω—ã",
			fmt.Sprintf("view_race_cars:%d", raceID),
		),
	))

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
			fmt.Sprintf("race_results:%d", raceID),
		),
	))

	// Add back button
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥",
			"races",
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

func DriverProfileKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
				"edit_driver_name",
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
				"edit_driver_desc",
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ",
				"edit_driver_photo",
			),
		),
		// –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
				"back_to_main",
			),
		),
	)
}

// AdminRacePanelKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≥–æ–Ω–∫–∏
func AdminRacePanelKeyboard(raceID int, state string) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	switch state {
	case models.RaceStateNotStarted:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("start_race:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
				fmt.Sprintf("admin_send_notifications:%d:reminder", raceID),
			),
		))

	case models.RaceStateInProgress:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
				fmt.Sprintf("admin_edit_results_menu:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üë®‚ÄçüèéÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
				fmt.Sprintf("race_registrations:%d", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—ã",
				fmt.Sprintf("admin_send_notifications:%d:cars", raceID),
			),
		))

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
				fmt.Sprintf("complete_race:%d", raceID),
			),
		))

	case models.RaceStateCompleted:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("admin_send_notifications:%d:results", raceID),
			),
		))
	}

	// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// RaceDetailsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –≥–æ–Ω–∫–∏
func RaceDetailsKeyboard(raceID int, userID int64, registered bool, race *models.Race, isAdmin bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	switch race.State {
	case models.RaceStateNotStarted:
		if registered {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
					fmt.Sprintf("unregister_race:%d", raceID),
				),
			))
		} else {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
					fmt.Sprintf("register_race:%d", raceID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üë®‚ÄçüèéÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏",
				fmt.Sprintf("race_registrations:%d", raceID),
			),
		))

	case models.RaceStateInProgress:
		if registered {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
					fmt.Sprintf("my_car:%d", raceID),
				),
				tgbotapi.NewInlineKeyboardButtonData(
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
					fmt.Sprintf("add_result:%d", raceID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–æ–Ω–∫–∏",
				fmt.Sprintf("race_progress:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))

	case models.RaceStateCompleted:
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
				fmt.Sprintf("race_results:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
				fmt.Sprintf("view_race_cars:%d", raceID),
			),
		))
	}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	if isAdmin {
		if race.State == models.RaceStateNotStarted {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"üèÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("start_race:%d", raceID),
				),
			))
		} else if race.State == models.RaceStateInProgress {
			keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–Ω–∫—É",
					fmt.Sprintf("complete_race:%d", raceID),
				),
			))
		}

		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
				fmt.Sprintf("admin_race_panel:%d", raceID),
			),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ–Ω–æ–∫",
			"races",
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// RaceProgressKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–æ–Ω–∫–∏
func RaceProgressKeyboard(raceID int, registered bool) tgbotapi.InlineKeyboardMarkup {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	// –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	if registered {
		keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üöó –ú–æ—è –º–∞—à–∏–Ω–∞",
				fmt.Sprintf("my_car:%d", raceID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
				fmt.Sprintf("add_result:%d", raceID),
			),
		))
	}

	// –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üöó –ú–∞—à–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
			fmt.Sprintf("view_race_cars:%d", raceID),
		),
	))

	keyboard = append(keyboard, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(
			"üîô –ù–∞–∑–∞–¥ –∫ –≥–æ–Ω–∫–µ",
			fmt.Sprintf("race_details:%d", raceID),
		),
	))

	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

// EditResultKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func EditResultKeyboard(resultID int, raceID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞",
				fmt.Sprintf("admin_edit_result_places:%d", resultID),
			),
			tgbotapi.NewInlineKeyboardButtonData(
				"üé≤ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ—Ä–æ–ª–ª",
				fmt.Sprintf("admin_toggle_reroll:%d", resultID),
			),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
				fmt.Sprintf("admin_edit_results_menu:%d", raceID),
			),
		),
	)
}
